Id,username,CreatedDate,UpdateDate,LikeCount,UnLikeCount,Institute_user_post,TechnicalField,NonTechnicalField,city_Name,post_title,Text,CreatedDate_user,UpdateDate_user
36,8,2020-10-11 12:14:56.596489+00:00,2020-10-11,0,0,MIT,None,digital marketing,New York,Learn Digital Marketing,"Online methods used to build brand awareness
Digital marketing strategies may include the use of one or more online channels and techniques (omnichannel) to increase brand awareness among consumers.

Building brand awareness may involve such methods/tools as:

Search engine optimization (SEO)
Search engine optimization techniques may be used to improve the visibility of business websites and brand-related content for common industry-related search queries.[45]

The importance of SEO to increasing brand awareness is said to correlate with the growing influence of search results and search features like featured snippets, knowledge panels, and local SEO on customer behavior.[46]

Search engine marketing (SEM)
SEM, also known as PPC advertising, involves the purchase of ad space in prominent, visible positions atop search results pages and websites. Search ads have been shown to have a positive impact on brand recognition, awareness and conversions.[47]

33% of searchers who click on paid ads do so because they directly respond to their particular search query.[48]

Social media marketing
70% of marketers list increasing brand awareness as their number one goal for marketing on social media platforms. Facebook, Instagram, Twitter, and YouTube are listed as the top platforms currently used by social media marketing teams.[49]

Content marketing
56% of marketers believe personalized content – brand-centered blogs, articles, social updates, videos, landing pages – improves brand recall and engagement.[50]

According to Mentionlytics, an active and consistent content strategy that incorporates elements of interactive content creation, social posting, and guest blogging can improve brand awareness and loyalty by 88%.[51]

Developments and strategies
One of the major changes that occurred in traditional marketing was the ""emergence of digital marketing"" (Patrutiu Baltes, Loredana, 2015), this led to the reinvention of marketing strategies in order to adapt to this major change in traditional marketing (Patrutiu Baltes, Loredana, 2015).

As digital marketing is dependent on technology which is ever-evolving and fast-changing, the same features should be expected from digital marketing developments and strategies. This portion is an attempt to qualify or segregate the notable highlights existing and being used as of press time.[when?]

Segmentation: More focus has been placed on segmentation within digital marketing, in order to target specific markets in both business-to-business and business-to-consumer sectors.
Influencer marketing: Important nodes are identified within related communities, known as influencers. This is becoming an important concept in digital targeting.[52] Influencers allow brands to take advantage of social media and the large audiences available on many of these platforms.[52] It is possible to reach influencers via paid advertising, such as Facebook Advertising or Google Adwords campaigns, or through sophisticated sCRM (social customer relationship management) software, such as SAP C4C, Microsoft Dynamics, Sage CRM and Salesforce CRM. Many universities now focus, at Masters level, on engagement strategies for influencers.
To summarize, Pull digital marketing is characterized by consumers actively seeking marketing content while Push digital marketing occurs when marketers send messages without that content being actively sought by the recipients.

Online behavioral advertising is the practice of collecting information about a user's online activity over time, ""on a particular device and across different, unrelated websites, in order to deliver advertisements tailored to that user's interests and preferences.[53][54] Such Advertisements are customized as per the user behavior and pattern.
Collaborative Environment: A collaborative environment can be set up between the organization, the technology service provider, and the digital agencies to optimize effort, resource sharing, reusability and communications.[55] Additionally, organizations are inviting their customers to help them better understand how to service them. This source of data is called User Generated Content. Much of this is acquired via company websites where the organization invites people to share ideas that are then evaluated by other users of the site. The most popular ideas are evaluated and implemented in some form. Using this method of acquiring data and developing new products can foster the organization's relationship with its customer as well as spawn ideas that would otherwise be overlooked. UGC is low-cost advertising as it is directly from the consumers and can save advertising costs for the organization.
Data-driven advertising: Users generate a lot of data in every step they take on the path of customer journey and brands can now use that data to activate their known audience with data-driven programmatic media buying. Without exposing customers' privacy, users' data can be collected from digital channels (e.g.: when the customer visits a website, reads an e-mail, or launches and interact with a brand's mobile app), brands can also collect data from real-world customer interactions, such as brick and mortar stores visits and from CRM and sales engines datasets. Also known as people-based marketing or addressable media, data-driven advertising is empowering brands to find their loyal customers in their audience and deliver in real time a much more personal communication, highly relevant to each customers' moment and actions.[56]
An important consideration today while deciding on a strategy is that the digital tools have democratized the promotional landscape.

Remarketing: Remarketing plays a major role in digital marketing. This tactic allows marketers to publish targeted ads in front of an interest category or a defined audience, generally called searchers in web speak, they have either searched for particular products or services or visited a website for some purpose.
Game advertising: Game ads are advertisements that exist within computer or video games. One of the most common examples of in-game advertising is billboards appearing in sports games. In-game ads also might appear as brand-name products like guns, cars, or clothing that exist as gaming status symbols.
The new digital era has enabled brands to selectively target their customers that may potentially be interested in their brand or based on previous browsing interests. Businesses can now use social media to select the age range, location, gender, and interests of whom they would like their targeted post to be seen. Furthermore, based on a customer's recent search history they can be ‘followed’ on the internet so they see advertisements from similar brands, products, and services,[57] This allows businesses to target the specific customers that they know and feel will most benefit from their product or service, something that had limited capabilities up until the digital era.

Ineffective forms of digital marketing
Digital marketing activity is still growing across the world according to the headline global marketing index. A study published in September 2018, found that global outlays on digital marketing tactics are approaching $100 billion.[58] Digital media continues to rapidly grow; while the marketing budgets are expanding, traditional media is declining (World Economics, 2015).[59] Digital media helps brands reach consumers to engage with their product or service in a personalized way. Five areas, which are outlined as current industry practices that are often ineffective are prioritizing clicks, balancing search and display, understanding mobiles, targeting, viewability, brand safety and invalid traffic, and cross-platform measurement (Whiteside, 2016).[60] Why these practices are ineffective and some ways around making these aspects effective are discussed surrounding the following points.

Prioritizing clicks
Prioritizing clicks refers to display click ads, although advantageous by being ‘simple, fast and inexpensive’ rates for display ads in 2016 is only 0.10 percent in the United States. This means one in a thousand click ads is relevant therefore having little effect. This displays that marketing companies should not just use click ads to evaluate the effectiveness of display advertisements (Whiteside, 2016).[60]

Balancing search and display
Balancing search and display for digital display ads are important; marketers tend to look at the last search and attribute all of the effectiveness of this. This, in turn, disregards other marketing efforts, which establish brand value within the consumer's mind. ComScore determined through drawing on data online, produced by over one hundred multichannel retailers that digital display marketing poses strengths when compared with or positioned alongside, paid search (Whiteside, 2016).[60] This is why it is advised that when someone clicks on a display ad the company opens a landing page, not its home page. A landing page typically has something to draw the customer in to search beyond this page. T Commonly marketers see increased sales among people exposed to a search ad. But the fact of how many people you can reach with a display campaign compared to a search campaign should be considered. Multichannel retailers have an increased reach if the display is considered in synergy with search campaigns. Overall both search and display aspects are valued as display campaigns build awareness for the brand so that more people are likely to click on these digital ads when running a search campaign (Whiteside, 2016).[60]

Understanding Mobiles: Understanding mobile devices is a significant aspect of digital marketing because smartphones and tablets are now responsible for 64% of the time US consumers are online (Whiteside, 2016).[60] Apps provide a big opportunity as well as challenge for the marketers because firstly the app needs to be downloaded and secondly the person needs to actually use it. This may be difficult as ‘half the time spent on smartphone apps occurs on the individuals single most used app, and almost 85% of their time on the top four rated apps’ (Whiteside, 2016).[60] Mobile advertising can assist in achieving a variety of commercial objectives and it is effective due to taking over the entire screen, and voice or status is likely to be considered highly; although the message must not be seen or thought of as intrusive (Whiteside, 2016).[60] Disadvantages of digital media used on mobile devices also include limited creative capabilities, and reach. Although there are many positive aspects including the user's entitlement to select product information, digital media creating a flexible message platform and there is potential for direct selling (Belch & Belch, 2012).[61]

Cross-platform measurement: The number of marketing channels continues to expand, as measurement practices are growing in complexity. A cross-platform view must be used to unify audience measurement and media planning. Market researchers need to understand how the Omni-channel affects consumer's behavior, although when advertisements are on a consumer's device this does not get measured. Significant aspects to cross-platform measurement involve deduplication and understanding that you have reached an incremental level with another platform, rather than delivering more impressions against people that have previously been reached (Whiteside, 2016).[60] An example is ‘ESPN and comScore partnered on Project Blueprint discovering the sports broadcaster achieved a 21% increase in unduplicated daily reach thanks to digital advertising’ (Whiteside, 2016).[60] Television and radio industries are the electronic media, which competes with digital and other technological advertising. Yet television advertising is not directly competing with online digital advertising due to being able to cross platform with digital technology. Radio also gains power through cross platforms, in online streaming content. Television and radio continue to persuade and affect the audience, across multiple platforms (Fill, Hughes, & De Franceso, 2013).[62]

Targeting, viewability, brand safety, and invalid traffic: Targeting, viewability, brand safety, and invalid traffic all are aspects used by marketers to help advocate digital advertising. Cookies are a form of digital advertising, which are tracking tools within desktop devices; causing difficulty, with shortcomings including deletion by web browsers, the inability to sort between multiple users of a device, inaccurate estimates for unique visitors, overstating reach, understanding frequency, problems with ad servers, which cannot distinguish between when cookies have been deleted and when consumers have not previously been exposed to an ad. Due to the inaccuracies influenced by cookies, demographics in the target market are low and vary (Whiteside, 2016).[60] Another element, which is affected by digital marketing, is ‘viewability’ or whether the ad was actually seen by the consumer. Many ads are not seen by a consumer and may never reach the right demographic segment. Brand safety is another issue of whether or not the ad was produced in the context of being unethical or having offensive content. Recognizing fraud when an ad is exposed is another challenge marketers face. This relates to invalid traffic as premium sites are more effective at detecting fraudulent traffic, although non-premium sites are more so the problem (Whiteside, 2016).[60]

Channels
Digital Marketing Channels are systems based on the Internet that can create, accelerate, and transmit product value from producer to a consumer terminal, through digital networks.[63][64] Digital marketing is facilitated by multiple Digital Marketing channels, As an advertiser one's core objective is to find channels which result in maximum two-way communication and a better overall ROI for the brand. There are multiple digital marketing channels available namely;[65]

Affiliate marketing - Affiliate marketing is perceived to not be considered a safe, reliable, and easy means of marketing through online platforms. This is due to a lack of reliability in terms of affiliates that can produce the demanded number of new customers. As a result of this risk and bad affiliates, it leaves the brand prone to exploitation in terms of claiming commission that isn't honestly acquired. Legal means may offer some protection against this, yet there are limitations in recovering any losses or investment. Despite this, affiliate marketing allows the brand to market towards smaller publishers and websites with smaller traffic. Brands that choose to use this marketing often should beware of such risks involved and look to associate with affiliates in which rules are laid down between the parties involved to assure and minimize the risk involved.[66]
Display advertising - As the term implies, online display advertising deals with showcasing promotional messages or ideas to the consumer on the internet. This includes a wide range of advertisements like advertising blogs, networks, interstitial ads, contextual data, ads on search engines, classified or dynamic advertisements, etc. The method can target specific audience tuning in from different types of locals to view a particular advertisement, the variations can be found as the most productive element of this method.
Email marketing - Email marketing in comparison to other forms of digital marketing is considered cheap; it is also a way to rapidly communicate a message such as their value proposition to existing or potential customers. Yet this channel of communication may be perceived by recipients to be bothersome and irritating especially to new or potential customers, therefore the success of email marketing is reliant on the language and visual appeal applied. In terms of visual appeal, there are indications that using graphics/visuals that are relevant to the message which is attempting to be sent, yet less visual graphics to be applied with initial emails are more effective in-turn creating a relatively personal feel to the email. In terms of language, the style is the main factor in determining how captivating the email is. Using a casual tone invokes a warmer and gentle and inviting feel to the email in comparison to a formal style. For combinations; it's suggested that to maximize effectiveness; using no graphics/visual alongside casual language. In contrast, using no visual appeal and a formal language style is seen as the least effective method.[67]
Search engine marketing - Search engine marketing (SEM) is a form of Internet marketing that involves the promotion of websites by increasing their visibility in search engine results pages (SERPs) primarily through paid advertising. SEM may incorporate Search engine optimization, which adjusts or rewrites website content and site architecture to achieve a higher ranking in search engine results pages to enhance pay per click (PPC) listings.
Social Media Marketing - The term 'Digital Marketing' has a number of marketing facets as it supports different channels used in and among these, comes the Social Media. When we use social media channels ( Facebook, Twitter, Pinterest, Instagram, Google+, etc.) to market a product or service, the strategy is called Social Media Marketing. It is a procedure wherein strategies are made and executed to draw in traffic for a website or to gain the attention of buyers over the web using different social media platforms.
Social networking service - A social networking service is an online platform which people use to build social networks or social relations with other people who share similar personal or career interests, activities, backgrounds or real-life connections
In-game advertising - In-Game advertising is defined as the ""inclusion of products or brands within a digital game.""[68] The game allows brands or products to place ads within their game, either in a subtle manner or in the form of an advertisement banner. There are many factors that exist in whether brands are successful in the advertising of their brand/product, these being: Type of game, technical platform, 3-D and 4-D technology, game genre, congruity of brand and game, prominence of advertising within the game. Individual factors consist of attitudes towards placement advertisements, game involvement, product involvement, flow, or entertainment. The attitude towards the advertising also takes into account not only the message shown but also the attitude towards the game. Dependent on how enjoyable the game is will determine how the brand is perceived, meaning if the game isn't very enjoyable the consumer may subconsciously have a negative attitude towards the brand/product being advertised. In terms of Integrated Marketing Communication ""integration of advertising in digital games into the general advertising, communication, and marketing strategy of the firm""[68] is important as it results in a more clarity about the brand/product and creates a larger overall effect.
Online public relations
Video advertising - This type of advertising in terms of digital/online means are advertisements that play on online videos e.g. YouTube videos. This type of marketing has seen an increase in popularity over time.[69] Online Video Advertising usually consists of three types: Pre-Roll advertisements which play before the video is watched, Mid-Roll advertisements which play during the video, or Post-Roll advertisements which play after the video is watched.[70] Post-roll advertisements were shown to have better brand recognition in relation to the other types, where-as ""ad-context congruity/incongruity plays an important role in reinforcing ad memorability"".[69] Due to selective attention from viewers, there is the likelihood that the message may not be received.[71] The main advantage of video advertising is that it disrupts the viewing experience of the video and therefore there is a difficulty in attempting to avoid them. How a consumer interacts with online video advertising can come down to three stages: Pre attention, attention, and behavioral decision.[72] These online advertisements give the brand/business options and choices. These consist of length, position, adjacent video content which all directly affect the effectiveness of the produced advertisement time,[69] therefore manipulating these variables will yield different results. The length of the advertisement has shown to affect memorability where-as a longer duration resulted in increased brand recognition.[69] This type of advertising, due to its nature of interruption of the viewer, it is likely that the consumer may feel as if their experience is being interrupted or invaded, creating negative perception of the brand.[69] These advertisements are also available to be shared by the viewers, adding to the attractiveness of this platform. Sharing these videos can be equated to the online version of word by mouth marketing, extending number of people reached.[73] Sharing videos creates six different outcomes: these being ""pleasure, affection, inclusion, escape, relaxation, and control"".[69] As well, videos that have entertainment value are more likely to be shared, yet pleasure is the strongest motivator to pass videos on. Creating a ‘viral’ trend from a mass amount of a brand advertisement can maximize the outcome of an online video advert whether it be positive or a negative outcome.
Native Advertising- involves the placement of paid content that replicates the look, feel, and oftentimes, the voice of a platform's existing content. It is most effective when used on digital platforms like websites, newsletters, and social media. Can be somewhat controversial as some critics feel it intentionally deceives consumers.[74]
Content Marketing- an approach to marketing that focuses on gaining and retaining customers by offering helpful content to customers that improves the buying experience and creates brand awareness.  A brand may use this approach to hold a customer’s attention with the goal of influencing potential purchase decisions.[75]
Sponsored Content- content created and paid for by a brand to promote a specific product or service.[76]
Inbound Marketing- a market strategy that involves using content as a means to attract customers to a brand or product. Requires extensive research into the behaviors, interests, and habits of the brand's target market.[77]
It is important for a firm to reach out to consumers and create a two-way communication model, as digital marketing allows consumers to give back feedback to the firm on a community-based site or straight directly to the firm via email.[78] Firms should seek this long term communication relationship by using multiple forms of channels and using promotional strategies related to their target consumer as well as word-of-mouth marketing.[78]

Benefits of social media marketing
Allows companies to promote themselves to large, diverse audiences that could not be reached through traditional marketing such as phone and email based advertising.[79]
Marketing on most social media platforms comes at little to no cost- making it accessible to virtually any size business.[79]
Accommodates personalized and direct marketing that targets specific demographics and markets.[79]
Companies can engage with customers directly, allowing them to obtain feedback and resolve issues almost immediately.[79]
Ideal environment for a company to conduct market research.[80]
Can be used as a means of obtaining information about competitors and boost competitive advantage.[80]
Social platforms can be used to promote brand events, deals, and news.[80]
Platforms can also be used to offer incentives in the form of loyalty points and discounts.[80]
Self-regulation
The ICC Code has integrated rules that apply to marketing communications using digital interactive media throughout the guidelines. There is also an entirely updated section dealing with issues specific to digital interactive media techniques and platforms. Code self-regulation on the use of digital interactive media includes:

Clear and transparent mechanisms to enable consumers to choose not to have their data collected for advertising or marketing purposes;
Clear indication that a social network site is commercial and is under the control or influence of a marketer;
Limits are set so that marketers communicate directly only when there are reasonable grounds to believe that the consumer has an interest in what is being offered;
Respect for the rules and standards of acceptable commercial behavior in social networks and the posting of marketing messages only when the forum or site has clearly indicated its willingness to receive them;
Special attention and protection for children.[81]
Strategy
Planning
Digital marketing planning is a term used in marketing management. It describes the first stage of forming a digital marketing strategy for the wider digital marketing system. The difference between digital and traditional marketing planning is that it uses digitally based communication tools and technology such as Social, Web, Mobile, Scannable Surface.[82][83] Nevertheless, both are aligned with the vision, the mission of the company and the overarching business strategy.[84]

Stages of planning
Using Dr Dave Chaffey's approach, the digital marketing planning (DMP) has three main stages: Opportunity, Strategy, and Action. He suggests that any business looking to implement a successful digital marketing strategy must structure their plan by looking at opportunity, strategy and action. This generic strategic approach often has phases of situation review, goal setting, strategy formulation, resource allocation and monitoring.[84]

1) Opportunity
To create an effective DMP, a business first needs to review the marketplace and set 'SMART' (Specific, Measurable, Actionable, Relevant, and Time-Bound) objectives.[85] They can set SMART objectives by reviewing the current benchmarks and key performance indicators (KPIs) of the company and competitors. It is pertinent that the analytics used for the KPIs be customized to the type, objectives, mission, and vision of the company.[86][87]

Companies can scan for marketing and sales opportunities by reviewing their own outreach as well as influencer outreach. This means they have competitive advantage because they are able to analyse their co-marketers influence and brand associations.[88]

To seize the opportunity, the firm should summarize its current customers' personas and purchase journey from this they are able to deduce their digital marketing capability. This means they need to form a clear picture of where they are currently and how many resources they can allocate for their digital marketing strategy i.e. labor, time, etc. By summarizing the purchase journey, they can also recognize gaps and growth for future marketing opportunities that will either meet objectives or propose new objectives and increase profit.

2) Strategy
To create a planned digital strategy, the company must review their digital proposition (what you are offering to consumers) and communicate it using digital customer targeting techniques. So, they must define online value proposition (OVP), this means the company must express clearly what they are offering customers online e.g. brand positioning.

The company should also (re)select target market segments and personas and define digital targeting approaches.

After doing this effectively, it is important to review the marketing mix for online options. The marketing mix comprises the 4Ps – Product, Price, Promotion, and Place.[89][90] Some academics have added three additional elements to the traditional 4Ps of marketing Process, Place, and Physical appearance making it 7Ps of marketing.[91]

3) Action
The third and final stage requires the firm to set a budget and management systems; these must be measurable touchpoints, such as the audience reached across all digital platforms. Furthermore, marketers must ensure the budget and management systems are integrating the paid, owned, and earned media of the company.[92] The Action and final stage of planning also requires the company to set in place measurable content creation e.g. oral, visual or written online media.[93]

After confirming the digital marketing plan, a scheduled format of digital communications (e.g. Gantt Chart) should be encoded throughout the internal operations of the company. This ensures that all platforms used fall in line and complement each other for the succeeding stages of digital marketing strategy.

Understanding the market
One way marketers can reach out to consumers, and understand their thought process is through what is called an empathy map. An empathy map is a four-step process. The first step is through asking questions that the consumer would be thinking in their demographic. The second step is to describe the feelings that the consumer may be having. The third step is to think about what the consumer would say in their situation. The final step is to imagine what the consumer will try to do based on the other three steps. This map is so marketing teams can put themselves in their target demographics shoes.[94] Web Analytics are also a very important way to understand consumers. They show the habits that people have online for each website.[95] One particular form of these analytics is predictive analytics which helps marketers figure out what route consumers are on. This uses the information gathered from other analytics and then creates different predictions of what people will do so that companies can strategize on what to do next, according to the people's trends.[96]

Consumer behavior- the habits or attitudes of a consumer that influences the buying process of a product or service.[97] Consumer behavior impacts virtually every stage of the buying process specifically in relation to digital environments and devices.[97]
Predictive analytics- a form of data mining that involves utilizing existing data to predict potential future trends or behaviors.[98] Can assist companies in predicting future behavior of customers.
Buyer persona- employing research of consumer behavior regarding habits like brand awareness and buying behavior to profile prospective customers.[98] Establishing a buyer persona helps a company better understand their audience and their specific wants/needs.
Marketing Strategy- strategic planning employed by a brand to determine potential positioning within a market as well as the prospective target audience; involves two key elements: segmentation and positioning.[98] By developing a marketing strategy, a company is able to better anticipate and plan for each step in the marketing and buying process.
Sharing economy
The ""sharing economy"" refers to an economic pattern that aims to obtain a resource that is not fully utilized.[99] Nowadays, the sharing economy has had an unimagined effect on many traditional elements including labor, industry, and distribution system.[99] This effect is not negligible that some industries are obviously under threat.[99][100] The sharing economy is influencing the traditional marketing channels by changing the nature of some specific concept including ownership, assets, and recruitment.[100]

Digital marketing channels and traditional marketing channels are similar in function that the value of the product or service is passed from the original producer to the end user by a kind of supply chain.[101] Digital Marketing channels, however, consist of internet systems that create, promote, and deliver products or services from producer to consumer through digital networks.[102] Increasing changes to marketing channels has been a significant contributor to the expansion and growth of the sharing economy.[102] Such changes to marketing channels has prompted unprecedented and historic growth.[102] In addition to this typical approach, the built-in control, efficiency and low cost of digital marketing channels is an essential features in the application of sharing economy.[101]

Digital marketing channels within the sharing economy are typically divided into three domains including, e-mail, social media, and search engine marketing or SEM.[102]

E-mail- a form of direct marketing characterized as being informative, promotional, and often a means of customer relationship management.[102] Organization can update the activity or promotion information to the user by subscribing the newsletter mail that happened in consuming. Success is reliant upon a company’s ability to access contact information from its past, present, and future clientele.[102]
Social Media- Social media has the capability to reach a larger audience in a shorter time frame than traditional marketing channels.[102] This makes social media a powerful tool for consumer engagement and the dissemination of information.[102]
Search Engine Marketing or SEM- Requires more specialized knowledge of the technology embedded in online platforms.[102] This marketing strategy requires long-term commitment and dedication to the ongoing improvement of a company’s digital presence.[102]
Other emerging digital marketing channels, particularly branded mobile apps, have excelled in the sharing economy.[102] Branded mobile apps are created specifically to initiate engagement between customers and the company. This engagement is typically facilitated through entertainment, information, or market transaction.[102]",2020-10-11,2020-10-11
35,8,2020-10-11 12:03:05.030834+00:00,2020-10-11,0,0,MIT,None,digital marketing,New York,Spring BOOT explanation,"Spring Boot Tutorial
Spring Boot Tutorial provides basic and advanced concepts of Spring Framework. Our Spring Boot Tutorial is designed for beginners and professionals both.

Spring Boot is a Spring module that provides the RAD (Rapid Application Development) feature to the Spring framework.

Our Spring Boot Tutorial includes all topics of Spring Boot such, as features, project, maven project, starter project wizard, Spring Initializr, CLI, applications, annotations, dependency management, properties, starters, Actuator, JPA, JDBC, etc.


What is Spring Boot
Spring Boot is a project that is built on the top of the Spring Framework. It provides an easier and faster way to set up, configure, and run both simple and web-based applications.

It is a Spring module that provides the RAD (Rapid Application Development) feature to the Spring Framework. It is used to create a stand-alone Spring-based application that you can just run because it needs minimal Spring configuration.

What is Spring Boot
In short, Spring Boot is the combination of Spring Framework and Embedded Servers.

In Spring Boot, there is no requirement for XML configuration (deployment descriptor). It uses convention over configuration software design paradigm that means it decreases the effort of the developer.

We can use Spring STS IDE or Spring Initializr to develop Spring Boot Java applications.

Why should we use Spring Boot Framework?

We should use Spring Boot Framework because:

The dependency injection approach is used in Spring Boot.
It contains powerful database transaction management capabilities.
It simplifies integration with other Java frameworks like JPA/Hibernate ORM, Struts, etc.
It reduces the cost and development time of the application.
Along with the Spring Boot Framework, many other Spring sister projects help to build applications addressing modern business needs. There are the following Spring sister projects are as follows:

Spring Data: It simplifies data access from the relational and NoSQL databases.
Spring Batch: It provides powerful batch processing.
Spring Security: It is a security framework that provides robust security to applications.
Spring Social: It supports integration with social networking like LinkedIn.
Spring Integration: It is an implementation of Enterprise Integration Patterns. It facilitates integration with other enterprise applications using lightweight messaging and declarative adapters.
Advantages of Spring Boot
It creates stand-alone Spring applications that can be started using Java -jar.
It tests web applications easily with the help of different Embedded HTTP servers such as Tomcat, Jetty, etc. We don't need to deploy WAR files.
It provides opinionated 'starter' POMs to simplify our Maven configuration.
It provides production-ready features such as metrics, health checks, and externalized configuration.
There is no requirement for XML configuration.
It offers a CLI tool for developing and testing the Spring Boot application.
It offers the number of plug-ins.
It also minimizes writing multiple boilerplate codes (the code that has to be included in many places with little or no alteration), XML configuration, and annotations.
It increases productivity and reduces development time.
Limitations of Spring Boot
Spring Boot can use dependencies that are not going to be used in the application. These dependencies increase the size of the application.

Goals of Spring Boot
The main goal of Spring Boot is to reduce development, unit test, and integration test time.

Provides Opinionated Development approach
Avoids defining more Annotation Configuration
Avoids writing lots of import statements
Avoids XML Configuration.
By providing or avoiding the above points, Spring Boot Framework reduces Development time, Developer Effort, and increases productivity.

Prerequisite of Spring Boot
To create a Spring Boot application, following are the prerequisites. In this tutorial, we will use Spring Tool Suite (STS) IDE.

Java 1.8
Maven 3.0+
Spring Framework 5.0.0.BUILD-SNAPSHOT
An IDE (Spring Tool Suite) is recommended.
Spring Boot Features
Web Development
SpringApplication
Application events and listeners
Admin features
Externalized Configuration
Properties Files
YAML Support
Type-safe Configuration
Logging
Security
Web Development

It is a well-suited Spring module for web application development. We can easily create a self-contained HTTP application that uses embedded servers like Tomcat, Jetty, or Undertow. We can use the spring-boot-starter-web module to start and run the application quickly.

SpringApplication

The SpringApplication is a class that provides a convenient way to bootstrap a Spring application. It can be started from the main method. We can call the application just by calling a static run() method.

public static void main(String[] args)  
{    
SpringApplication.run(ClassName.class, args);    
}  
Application Events and Listeners

Spring Boot uses events to handle the variety of tasks. It allows us to create factories file that is used to add listeners. We can refer it to using the ApplicationListener key.

Always create factories file in META-INF folder like META-INF/spring.factories.

Admin Support

Spring Boot provides the facility to enable admin-related features for the application. It is used to access and manage applications remotely. We can enable it in the Spring Boot application by using spring.application.admin.enabled property.

Externalized Configuration

Spring Boot allows us to externalize our configuration so that we can work with the same application in different environments. The application uses YAML files to externalize configuration.

Properties Files

Spring Boot provides a rich set of Application Properties. So, we can use that in the properties file of our project. The properties file is used to set properties like server-port =8082 and many others. It helps to organize application properties.

YAML Support

It provides a convenient way of specifying the hierarchical configuration. It is a superset of JSON. The SpringApplication class automatically supports YAML. It is an alternative of properties file.

Type-safe Configuration

The strong type-safe configuration is provided to govern and validate the configuration of the application. Application configuration is always a crucial task which should be type-safe. We can also use annotation provided by this library.

Logging

Spring Boot uses Common logging for all internal logging. Logging dependencies are managed by default. We should not change logging dependencies if no customization is needed.

Security

Spring Boot applications are spring bases web applications. So, it is secure by default with basic authentication on all HTTP endpoints. A rich set of Endpoints is available to develop a secure Spring Boot application.",2020-10-11,2020-10-11
34,8,2020-10-11 12:01:57.349498+00:00,2020-10-11,0,0,MIT,None,digital marketing,New York,Java web services,"next →← prev
Java Web Services Tutorial
Java web services tutorial provides concepts and examples of two main java web services api: JAX-WS and JAX-RS. The java web service application can be accessed by other programming languages such as .Net and PHP.

Java web service application perform communication through WSDL (Web Services Description Language). There are two ways to write java web service application code: SOAP and RESTful.

Java Web Services API
There are two main API's defined by Java for developing web service applications since JavaEE 6.


1) JAX-WS: for SOAP web services. The are two ways to write JAX-WS application code: by RPC style and Document style.

2) JAX-RS: for RESTful web services. There are mainly 2 implementation currently in use for creating JAX-RS application: Jersey and RESTeasy.",2020-10-11,2020-10-11
33,8,2020-10-11 12:00:39.910497+00:00,2020-10-11,0,0,MIT,None,digital marketing,New York,MongoDB Overview,"What is MongoDB
MongoDB is an open-source document database that provides high performance, high availability, and automatic scaling.

In simple words, you can say that - Mongo DB is a document-oriented database. It is an open source product, developed and supported by a company named 10gen.

MongoDB is available under General Public license for free, and it is also available under Commercial license from the manufacturer.

The manufacturing company 10gen has defined MongoDB as:

""MongoDB is a scalable, open source, high performance, document-oriented database."" - 10gen

MongoDB was designed to work with commodity servers. Now it is used by the company of all sizes, across all industry.

History of MongoDB
The initial development of MongoDB began in 2007 when the company was building a platform as a service similar to window azure.

Window azure is a cloud computing platform and infrastructure, created by Microsoft, to build, deploy and manage applications and service through a global network.
MongoDB was developed by a NewYork based organization named 10gen which is now known as MongoDB Inc. It was initially developed as a PAAS (Platform as a Service). Later in 2009, it is introduced in the market as an open source database server that was maintained and supported by MongoDB Inc.

The first ready production of MongoDB has been considered from version 1.4 which was released in March 2010.

MongoDB2.4.9 was the latest and stable version which was released on January 10, 2014.

Purpose of building MongoDB
It may be a very genuine question that - ""what was the need of MongoDB although there were many databases in action?""

There is a simple answer:

All the modern applications require big data, fast features development, flexible deployment, and the older database systems not competent enough, so the MongoDB was needed.

The primary purpose of building MongoDB is:

Scalability
Performance
High Availability
Scaling from single server deployments to large, complex multi-site architectures.
Key points of MongoDB
Develop Faster
Deploy Easier
Scale Bigger
First of all, we should know what is document oriented database?

Example of document oriented database
MongoDB is a document oriented database. It is a key feature of MongoDB. It offers a document oriented storage. It is very simple you can program it easily.

MongoDB stores data as documents, so it is known as document-oriented database.

FirstName = ""John"",                                                                                                             
Address = ""Detroit"",                                                                                                     
Spouse = [{Name: ""Angela""}].                                                                                             
FirstName =""John"",    
Address = ""Wick""  
There are two different documents (separated by ""."").

Storing data in this manner is called as document-oriented database.

Mongo DB falls into a class of databases that calls Document Oriented Databases. There is also a broad category of database known as No SQL Databases.

Features of MongoDB
These are some important features of MongoDB:

1. Support ad hoc queries

In MongoDB, you can search by field, range query and it also supports regular expression searches.

2. Indexing

You can index any field in a document.

3. Replication

MongoDB supports Master Slave replication.

A master can perform Reads and Writes and a Slave copies data from the master and can only be used for reads or back up (not writes)

4. Duplication of data

MongoDB can run over multiple servers. The data is duplicated to keep the system up and also keep its running condition in case of hardware failure.

5. Load balancing

It has an automatic load balancing configuration because of data placed in shards.

6. Supports map reduce and aggregation tools.

7. Uses JavaScript instead of Procedures.

8. It is a schema-less database written in C++.

9. Provides high performance.

10. Stores files of any size easily without complicating your stack.

11. Easy to administer in the case of failures.

12. It also supports:

JSON data model with dynamic schemas

Auto-sharding for horizontal scalability

Built in replication for high availability

Now a day many companies using MongoDB to create new types of applications, improve performance and availability.",2020-10-11,2020-10-11
32,8,2020-10-11 11:59:25.468422+00:00,2020-10-11,0,0,MIT,None,digital marketing,New York,Introduction of Oracle,"What is Oracle
Oracle database is a relational database management system. It is known as Oracle database, OracleDB or simply Oracle. It is produced and marketed by Oracle Corporation.

Oracle database is the first database designed for enterprise grid computing. The enterprise grid computing provides the most flexible and cost effective way to manage information and applications.

Different editions of Oracle database
Following are the four editions of the Oracle database.


Enterprise Edition: It is the most robust and secure edition. It offers all features, including superior performance and security.
Standard Edition: It provides the base functionality for users that do not require Enterprise Edition's robust package.
Express Edition (XE): It is the lightweight, free and limited Windows and Linux edition.
Oracle Lite: It is designed for mobile devices.
The Oracle Corporation
Oracle Corporation is the largest software company in the field of database business. Its relational database was the first to support SQL which has since become the industry standard.

Oracle database is one of the most trusted and widely used relational database engines. The biggest rival of Oracle database is Microsoft's SQL Server.

History of Oracle
Oracle was originally developed by Lawrence Ellison (Larry Ellision) and his two friends and former co-worker in 1977. Oracle DB runs on the most major platforms like Windows, UNIX, Linux and Mac OS",2020-10-11,2020-10-11
31,8,2020-10-11 11:58:16.009814+00:00,2020-10-11,0,0,MIT,None,digital marketing,New York,SQL Foreign Key,"SQL FOREIGN KEY
In the relational databases, a foreign key is a field or a column that is used to establish a link between two tables.

In simple words you can say that, a foreign key in one table used to point primary key in another table.

Let us take an example to explain it:


Here are two tables first one is students table and second is orders table.

Here orders are given by students.

First table:

S_Id	LastName	FirstName	CITY
1	MAURYA	AJEET	ALLAHABAD
2	JAISWAL	RATAN	GHAZIABAD
3	ARORA	SAUMYA	MODINAGAR
Second table:

O_Id	OrderNo	S_Id
1	99586465	2
2	78466588	2
3	22354846	3
4	57698656	1
Here you see that ""S_Id"" column in the ""Orders"" table points to the ""S_Id"" column in ""Students"" table.

The ""S_Id"" column in the ""Students"" table is the PRIMARY KEY in the ""Students"" table.
The ""S_Id"" column in the ""Orders"" table is a FOREIGN KEY in the ""Orders"" table.
The foreign key constraint is generally prevents action that destroy links between tables.

It also prevents invalid data to enter in foreign key column.

SQL FOREIGN KEY constraint ON CREATE TABLE:
(Defining a foreign key constraint on single column)

To create a foreign key on the ""S_Id"" column when the ""Orders"" table is created:

MySQL:

CREATE TABLE orders  
(  
O_Id int NOT NULL,  
Order_No  int NOT NULL,  
S_Id int,  
PRIMAY KEY (O_Id),  
FOREIGN KEY (S_Id) REFERENCES Persons (S_Id)  
)  
SQL Server /Oracle / MS Access:

CREATE TABLE Orders  
(  
O_Id int NOT NULL PRIMAY KEY,  
Order_No int NOT NULL,  
S_Id int FOREIGN KEY REFERENCES persons (S_Id)  
)  
SQL FOREIGN KEY constraint for ALTER TABLE:
If the Order table is already created and you want to create a FOREIGN KEY constraint on the ""S_Id"" column, you should write the following syntax:

Defining a foreign key constraint on single column:

MySQL / SQL Server / Oracle / MS Access:

ALTER TABLE Orders  
ADD CONSTRAINT fk_PerOrders  
FOREIGN KEY(S_Id)  
REFERENCES Students (S_Id)  
DROP SYNTAX for FOREIGN KEY COSTRAINT:
If you want to drop a FOREIGN KEY constraint, use the following syntax:

MySQL:

ALTER TABLE Orders  
ROP FOREIGN KEY fk_PerOrders  
SQL Server / Oracle / MS Access:

ALTER TABLE Orders  
DROP CONSTRAINT fk_PerOrders  
Difference between primary key and foreign key in SQL:
These are some important difference between primary key and foreign key in SQL-

Primary key cannot be null on the other hand foreign key can be null.

Primary key is always unique while foreign key can be duplicated.

Primary key uniquely identify a record in a table while foreign key is a field in a table that is primary key in another table.

There is only one primary key in the table on the other hand we can have more than one foreign key in the table.

By default primary key adds a clustered index on the other hand foreign key does not automatically create an index, clustered or non-clustered. You must manually create an index for foreign key.",2020-10-11,2020-10-11
30,7,2020-10-11 11:50:55.581534+00:00,2020-10-11,0,0,Bits,C language,digital marketing,Chandigarh,Pointers,"next →← prev
C Pointers
The pointer in C language is a variable which stores the address of another variable. This variable can be of type int, char, array, function, or any other pointer. The size of the pointer depends on the architecture. However, in 32-bit architecture the size of a pointer is 2 byte.

Consider the following example to define a pointer which stores the address of an integer.

int n = 10;   
int* p = &n; // Variable p of type pointer is pointing to the address of the variable n of type integer.   
Declaring a pointer
The pointer in c language can be declared using * (asterisk symbol). It is also known as indirection pointer used to dereference a pointer.


int *a;//pointer to int  
char *c;//pointer to char  
Pointer Example
An example of using pointers to print the address and value is given below.

pointer example
As you can see in the above figure, pointer variable stores the address of number variable, i.e., fff4. The value of number variable is 50. But the address of pointer variable p is aaa3.

By the help of * (indirection operator), we can print the value of pointer variable p.

Let's see the pointer example as explained for the above figure.

#include<stdio.h>  
int main(){  
int number=50;    
int *p;      
p=&number;//stores the address of number variable    
printf(""Address of p variable is %x \n"",p); // p contains the address of the number therefore printing p gives the address of number.     
printf(""Value of p variable is %d \n"",*p); // As we know that * is used to dereference a pointer therefore if we print *p, we will get the value stored at the address contained by p.    
return 0;  
}    
Output

Address of number variable is fff4
Address of p variable is fff4
Value of p variable is 50
Pointer to array
int arr[10];  
int *p[10]=&arr; // Variable p of type pointer is pointing to the address of an integer array arr.  
Pointer to a function
void show (int);  
void(*p)(int) = &display; // Pointer p is pointing to the address of a function  
Pointer to structure
struct st {  
    int i;  
    float f;  
}ref;  
struct st *p = &ref;  
c pointers
Advantage of pointer
1) Pointer reduces the code and improves the performance, it is used to retrieving strings, trees, etc. and used with arrays, structures, and functions.

2) We can return multiple values from a function using the pointer.

3) It makes you able to access any memory location in the computer's memory.

Usage of pointer
There are many applications of pointers in c language.

1) Dynamic memory allocation

In c language, we can dynamically allocate memory using malloc() and calloc() functions where the pointer is used.

2) Arrays, Functions, and Structures

Pointers in c language are widely used in arrays, functions, and structures. It reduces the code and improves the performance.

Address Of (&) Operator
The address of operator '&' returns the address of a variable. But, we need to use %u to display the address of a variable.

#include<stdio.h>  
int main(){  
int number=50;   
printf(""value of number is %d, address of number is %u"",number,&number);    
return 0;  
}    
Output

value of number is 50, address of number is fff4
NULL Pointer
A pointer that is not assigned any value but NULL is known as the NULL pointer. If you don't have any address to be specified in the pointer at the time of declaration, you can assign NULL value. It will provide a better approach.

int *p=NULL;
In the most libraries, the value of the pointer is 0 (zero).

Pointer Program to swap two numbers without using the 3rd variable.
#include<stdio.h>  
int main(){  
int a=10,b=20,*p1=&a,*p2=&b;  
  
printf(""Before swap: *p1=%d *p2=%d"",*p1,*p2);  
*p1=*p1+*p2;  
*p2=*p1-*p2;  
*p1=*p1-*p2;  
printf(""\nAfter swap: *p1=%d *p2=%d"",*p1,*p2);  
  
return 0;  
}  
Output

Before swap: *p1=10 *p2=20
After swap: *p1=20 *p2=10
Reading complex pointers
There are several things which must be taken into the consideration while reading the complex pointers in C. Lets see the precedence and associativity of the operators which are used regarding pointers.

Operator	Precedence	Associativity
(), []	1	Left to right
*, identifier	2	Right to left
Data type	3	-
Here,we must notice that,

(): This operator is a bracket operator used to declare and define the function.
[]: This operator is an array subscript operator
* : This operator is a pointer operator.
Identifier: It is the name of the pointer. The priority will always be assigned to this.
Data type: Data type is the type of the variable to which the pointer is intended to point. It also includes the modifier like signed int, long, etc).
How to read the pointer: int (*p)[10].

To read the pointer, we must see that () and [] have the equal precedence. Therefore, their associativity must be considered here. The associativity is left to right, so the priority goes to ().

Inside the bracket (), pointer operator * and pointer name (identifier) p have the same precedence. Therefore, their associativity must be considered here which is right to left, so the priority goes to p, and the second priority goes to *.

Assign the 3rd priority to [] since the data type has the last precedence. Therefore the pointer will look like following.

char -> 4
* -> 2
p -> 1
[10] -> 3
The pointer will be read as p is a pointer to an array of integers of size 10.

Example

How to read the following pointer?

int (*p)(int (*)[2], int (*)void))  
Explanation
This pointer will be read as p is a pointer to such function which accepts the first parameter as the pointer to a one-dimensional array of integers of size two and the second parameter as the pointer to a function which parameter is void and return type is the integer.",2020-10-11,2020-10-11
29,7,2020-10-11 11:50:13.413120+00:00,2020-10-11,0,0,Bits,C language,digital marketing,Chandigarh,Functions in C language,"C Functions
In c, we can divide a large program into the basic building blocks known as function. The function contains the set of programming statements enclosed by {}. A function can be called multiple times to provide reusability and modularity to the C program. In other words, we can say that the collection of functions creates a program. The function is also known as procedureor subroutinein other programming languages.

Advantage of functions in C
There are the following advantages of C functions.

By using functions, we can avoid rewriting same logic/code again and again in a program.
We can call C functions any number of times in a program and from any place in a program.
We can track a large C program easily when it is divided into multiple functions.
Reusability is the main achievement of C functions.
However, Function calling is always a overhead in a C program.
Function Aspects
There are three aspects of a C function.


Function declaration A function must be declared globally in a c program to tell the compiler about the function name, function parameters, and return type.

Function call Function can be called from anywhere in the program. The parameter list must not differ in function calling and function declaration. We must pass the same number of functions as it is declared in the function declaration.

Function definition It contains the actual statements which are to be executed. It is the most important aspect to which the control comes when the function is called. Here, we must notice that only one value can be returned from the function.

SN	C function aspects	Syntax
1	Function declaration	return_type function_name (argument list);
2	Function call	function_name (argument_list)
3	Function definition	return_type function_name (argument list) {function body;}
The syntax of creating function in c language is given below:

return_type function_name(data_type parameter...){  
//code to be executed  
}  
Types of Functions
There are two types of functions in C programming:

Library Functions: are the functions which are declared in the C header files such as scanf(), printf(), gets(), puts(), ceil(), floor() etc.
User-defined functions: are the functions which are created by the C programmer, so that he/she can use it many times. It reduces the complexity of a big program and optimizes the code.
C Function
Return Value
A C function may or may not return a value from the function. If you don't have to return any value from the function, use void for the return type.

Let's see a simple example of C function that doesn't return any value from the function.

Example without return value:

void hello(){  
printf(""hello c"");  
}  
If you want to return any value from the function, you need to use any data type such as int, long, char, etc. The return type depends on the value to be returned from the function.

Let's see a simple example of C function that returns int value from the function.

Example with return value:

int get(){  
return 10;  
}  
In the above example, we have to return 10 as a value, so the return type is int. If you want to return floating-point value (e.g., 10.2, 3.1, 54.5, etc), you need to use float as the return type of the method.

float get(){  
return 10.2;  
}  
Now, you need to call the function, to get the value of the function.

Different aspects of function calling
A function may or may not accept any argument. It may or may not return any value. Based on these facts, There are four different aspects of function calls.

function without arguments and without return value
function without arguments and with return value
function with arguments and without return value
function with arguments and with return value
Example for Function without argument and return value
Example 1

#include<stdio.h>  
void printName();  
void main ()  
{  
    printf(""Hello "");  
    printName();  
}  
void printName()  
{  
    printf(""Javatpoint"");  
}  
Output

Hello Javatpoint
Example 2

#include<stdio.h>  
void sum();  
void main()  
{  
    printf(""\nGoing to calculate the sum of two numbers:"");  
    sum();  
}  
void sum()  
{  
    int a,b;   
    printf(""\nEnter two numbers"");  
    scanf(""%d %d"",&a,&b);   
    printf(""The sum is %d"",a+b);  
}  
Output

Going to calculate the sum of two numbers:

Enter two numbers 10 
24 

The sum is 34
Example for Function without argument and with return value
Example 1

#include<stdio.h>  
int sum();  
void main()  
{  
    int result;   
    printf(""\nGoing to calculate the sum of two numbers:"");  
    result = sum();  
    printf(""%d"",result);  
}  
int sum()  
{  
    int a,b;   
    printf(""\nEnter two numbers"");  
    scanf(""%d %d"",&a,&b);  
    return a+b;   
}  
Output

Going to calculate the sum of two numbers:

Enter two numbers 10 
24 

The sum is 34
Example 2: program to calculate the area of the square

#include<stdio.h>  
int sum();  
void main()  
{  
    printf(""Going to calculate the area of the square\n"");  
    float area = square();  
    printf(""The area of the square: %f\n"",area);  
}  
int square()  
{  
    float side;  
    printf(""Enter the length of the side in meters: "");  
    scanf(""%f"",&side);  
    return side * side;  
}  
Output

Going to calculate the area of the square 
Enter the length of the side in meters: 10 
The area of the square: 100.000000
Example for Function with argument and without return value
Example 1

#include<stdio.h>  
void sum(int, int);  
void main()  
{  
    int a,b,result;   
    printf(""\nGoing to calculate the sum of two numbers:"");  
    printf(""\nEnter two numbers:"");  
    scanf(""%d %d"",&a,&b);  
    sum(a,b);  
}  
void sum(int a, int b)  
{  
    printf(""\nThe sum is %d"",a+b);      
}  
Output

Going to calculate the sum of two numbers:

Enter two numbers 10 
24 

The sum is 34
Example 2: program to calculate the average of five numbers.

#include<stdio.h>  
void average(int, int, int, int, int);  
void main()  
{  
    int a,b,c,d,e;   
    printf(""\nGoing to calculate the average of five numbers:"");  
    printf(""\nEnter five numbers:"");  
    scanf(""%d %d %d %d %d"",&a,&b,&c,&d,&e);  
    average(a,b,c,d,e);  
}  
void average(int a, int b, int c, int d, int e)  
{  
    float avg;   
    avg = (a+b+c+d+e)/5;   
    printf(""The average of given five numbers : %f"",avg);  
}  
Output

Going to calculate the average of five numbers:
Enter five numbers:10 
20
30
40
50
The average of given five numbers : 30.000000
Example for Function with argument and with return value
Example 1

#include<stdio.h>  
int sum(int, int);  
void main()  
{  
    int a,b,result;   
    printf(""\nGoing to calculate the sum of two numbers:"");  
    printf(""\nEnter two numbers:"");  
    scanf(""%d %d"",&a,&b);  
    result = sum(a,b);  
    printf(""\nThe sum is : %d"",result);  
}  
int sum(int a, int b)  
{  
    return a+b;  
}  
Output

Going to calculate the sum of two numbers:
Enter two numbers:10
20 
The sum is : 30   
Example 2: Program to check whether a number is even or odd

#include<stdio.h>  
int even_odd(int);  
void main()  
{  
 int n,flag=0;  
 printf(""\nGoing to check whether a number is even or odd"");  
 printf(""\nEnter the number: "");  
 scanf(""%d"",&n);  
 flag = even_odd(n);  
 if(flag == 0)  
 {  
    printf(""\nThe number is odd"");  
 }  
 else   
 {  
    printf(""\nThe number is even"");  
 }  
}  
int even_odd(int n)  
{  
    if(n%2 == 0)  
    {  
        return 1;  
    }  
    else   
    {  
        return 0;  
    }  
}  
Output

Going to check whether a number is even or odd
Enter the number: 100
The number is even
C Library Functions
Library functions are the inbuilt function in C that are grouped and placed at a common place called the library. Such functions are used to perform some specific operations. For example, printf is a library function used to print on the console. The library functions are created by the designers of compilers. All C standard library functions are defined inside the different header files saved with the extension .h. We need to include these header files in our program to make use of the library functions defined in such header files. For example, To use the library functions such as printf/scanf we need to include stdio.h in our program which is a header file that contains all the library functions regarding standard input/output.",2020-10-11,2020-10-11
28,7,2020-10-11 11:48:42.172847+00:00,2020-10-11,0,0,Bits,C language,digital marketing,Chandigarh,History of C language,"History of C Language
Dennis Ritchie - founder of C language
History of C language is interesting to know. Here we are going to discuss a brief history of the c language.

C programming language was developed in 1972 by Dennis Ritchie at bell laboratories of AT&T (American Telephone & Telegraph), located in the U.S.A.

Dennis Ritchie is known as the founder of the c language.


It was developed to overcome the problems of previous languages such as B, BCPL, etc.

Initially, C language was developed to be used in UNIX operating system. It inherits many features of previous languages such as B and BCPL.

Let's see the programming languages that were developed before C language.

Language	Year	Developed By
Algol	1960	International Group
BCPL	1967	Martin Richard
B	1970	Ken Thompson
Traditional C	1972	Dennis Ritchie
K & R C	1978	Kernighan & Dennis Ritchie
ANSI C	1989	ANSI Committee
ANSI/ISO C	1990	ISO Committee
C99	1999	Standardization Committee",2020-10-11,2020-10-11
27,6,2020-10-11 11:44:32.342397+00:00,2020-10-11,0,0,Piet,c++,Soft skills,Bihar,Exception handling in c++,"next →← prev
C++ Exception Handling
Exception Handling in C++ is a process to handle runtime errors. We perform exception handling so the normal flow of the application can be maintained even after runtime errors.

In C++, exception is an event or object which is thrown at runtime. All exceptions are derived from std::exception class. It is a runtime error which can be handled. If we don't handle the exception, it prints exception message and terminates the program.

Advantage
It maintains the normal flow of the application. In such case, rest of the code is executed even after exception.


C++ Exception Classes
In C++ standard exceptions are defined in <exception> class that we can use inside our programs. The arrangement of parent-child class hierarchy is shown below:

Cpp Exception handling 1

 
All the exception classes in C++ are derived from std::exception class. Let's see the list of C++ common exception classes.

Exception	Description
std::exception	It is an exception and parent class of all standard C++ exceptions.
std::logic_failure	It is an exception that can be detected by reading a code.
std::runtime_error	It is an exception that cannot be detected by reading a code.
std::bad_exception	It is used to handle the unexpected exceptions in a c++ program.
std::bad_cast	This exception is generally be thrown by dynamic_cast.
std::bad_typeid	This exception is generally be thrown by typeid.
std::bad_alloc	This exception is generally be thrown by new.
C++ Exception Handling Keywords
In C++, we use 3 keywords to perform exception handling:

try
catch, and
throw",2020-10-11,2020-10-11
26,6,2020-10-11 11:43:39.332913+00:00,2020-10-11,0,0,Piet,c++,Soft skills,Bihar,Inheritence in c++,"C++ Inheritance
In C++, inheritance is a process in which one object acquires all the properties and behaviors of its parent object automatically. In such way, you can reuse, extend or modify the attributes and behaviors which are defined in other class.

In C++, the class which inherits the members of another class is called derived class and the class whose members are inherited is called base class. The derived class is the specialized class for the base class.

Advantage of C++ Inheritance
Code reusability: Now you can reuse the members of your parent class. So, there is no need to define the member again. So less code is required in the class.


Types Of Inheritance
C++ supports five types of inheritance:

Single inheritance
Multiple inheritance
Hierarchical inheritance
Multilevel inheritance
Hybrid inheritance
C++ Inheritance
Derived Classes
A Derived class is defined as the class derived from the base class.

The Syntax of Derived class:

class derived_class_name :: visibility-mode base_class_name  
{  
    // body of the derived class.  
}  
Where,

derived_class_name: It is the name of the derived class.

visibility mode: The visibility mode specifies whether the features of the base class are publicly inherited or privately inherited. It can be public or private.

base_class_name: It is the name of the base class.

When the base class is privately inherited by the derived class, public members of the base class becomes the private members of the derived class. Therefore, the public members of the base class are not accessible by the objects of the derived class only by the member functions of the derived class.
When the base class is publicly inherited by the derived class, public members of the base class also become the public members of the derived class. Therefore, the public members of the base class are accessible by the objects of the derived class as well as by the member functions of the base class.
Note:
In C++, the default mode of visibility is private.
The private members of the base class are never inherited.
C++ Single Inheritance
Single inheritance is defined as the inheritance in which a derived class is inherited from the only one base class.

C++ Inheritance
Where 'A' is the base class, and 'B' is the derived class.

C++ Single Level Inheritance Example: Inheriting Fields
When one class inherits another class, it is known as single level inheritance. Let's see the example of single level inheritance which inherits the fields only.

#include <iostream>  
using namespace std;  
 class Account {  
   public:  
   float salary = 60000;   
 };  
   class Programmer: public Account {  
   public:  
   float bonus = 5000;    
   };       
int main(void) {  
     Programmer p1;  
     cout<<""Salary: ""<<p1.salary<<endl;    
     cout<<""Bonus: ""<<p1.bonus<<endl;    
    return 0;  
}  
Output:

Salary: 60000
Bonus: 5000
In the above example, Employee is the base class and Programmer is the derived class.

C++ Single Level Inheritance Example: Inheriting Methods
Let's see another example of inheritance in C++ which inherits methods only.

#include <iostream>  
using namespace std;  
 class Animal {  
   public:  
 void eat() {   
    cout<<""Eating...""<<endl;   
 }    
   };  
   class Dog: public Animal    
   {    
       public:  
     void bark(){  
    cout<<""Barking..."";   
     }    
   };   
int main(void) {  
    Dog d1;  
    d1.eat();  
    d1.bark();  
    return 0;  
}  
Output:

Eating...
Barking...
Let's see a simple example.

#include <iostream>  
using namespace std;  
class A  
{  
    int a = 4;  
    int b = 5;  
    public:  
    int mul()  
    {  
        int c = a*b;  
        return c;  
    }     
};  
  
class B : private A  
{  
    public:  
    void display()  
    {  
        int result = mul();  
        std::cout <<""Multiplication of a and b is : ""<<result<< std::endl;  
    }  
};  
int main()  
{  
   B b;  
   b.display();  
  
    return 0;  
}  
Output:

Multiplication of a and b is : 20
In the above example, class A is privately inherited. Therefore, the mul() function of class 'A' cannot be accessed by the object of class B. It can only be accessed by the member function of class B.

How to make a Private Member Inheritable
The private member is not inheritable. If we modify the visibility mode by making it public, but this takes away the advantage of data hiding.

C++ introduces a third visibility modifier, i.e., protected. The member which is declared as protected will be accessible to all the member functions within the class as well as the class immediately derived from it.

Visibility modes can be classified into three categories:

C++ Inheritance
Public: When the member is declared as public, it is accessible to all the functions of the program.
Private: When the member is declared as private, it is accessible within the class only.
Protected: When the member is declared as protected, it is accessible within its own class as well as the class immediately derived from it.
Visibility of Inherited Members
Base class visibility	Derived class visibility
Public	Private	Protected
Private	Not Inherited	Not Inherited	Not Inherited
Protected	Protected	Private	Protected
Public	Public	Private	Protected
C++ Multilevel Inheritance
Multilevel inheritance is a process of deriving a class from another derived class.

C++ Inheritance
C++ Multi Level Inheritance Example
When one class inherits another class which is further inherited by another class, it is known as multi level inheritance in C++. Inheritance is transitive so the last derived class acquires all the members of all its base classes.

Let's see the example of multi level inheritance in C++.

#include <iostream>  
using namespace std;  
 class Animal {  
   public:  
 void eat() {   
    cout<<""Eating...""<<endl;   
 }    
   };  
   class Dog: public Animal   
   {    
       public:  
     void bark(){  
    cout<<""Barking...""<<endl;   
     }    
   };   
   class BabyDog: public Dog   
   {    
       public:  
     void weep() {  
    cout<<""Weeping..."";   
     }    
   };   
int main(void) {  
    BabyDog d1;  
    d1.eat();  
    d1.bark();  
     d1.weep();  
     return 0;  
}  
Output:

Eating...
Barking...
Weeping...
C++ Multiple Inheritance
Multiple inheritance is the process of deriving a new class that inherits the attributes from two or more classes.

C++ Inheritance
Syntax of the Derived class:

class D : visibility B-1, visibility B-2, ?  
{  
    // Body of the class;  
}   
Let's see a simple example of multiple inheritance.

#include <iostream>  
using namespace std;  
class A  
{  
    protected:  
     int a;  
    public:  
    void get_a(int n)  
    {  
        a = n;  
    }  
};  
  
class B  
{  
    protected:  
    int b;  
    public:  
    void get_b(int n)  
    {  
        b = n;  
    }  
};  
class C : public A,public B  
{  
   public:  
    void display()  
    {  
        std::cout << ""The value of a is : "" <<a<< std::endl;  
        std::cout << ""The value of b is : "" <<b<< std::endl;  
        cout<<""Addition of a and b is : ""<<a+b;  
    }  
};  
int main()  
{  
   C c;  
   c.get_a(10);  
   c.get_b(20);  
   c.display();  
  
    return 0;  
}  
Output:

The value of a is : 10
The value of b is : 20
Addition of a and b is : 30
In the above example, class 'C' inherits two base classes 'A' and 'B' in a public mode.

Ambiquity Resolution in Inheritance
Ambiguity can be occurred in using the multiple inheritance when a function with the same name occurs in more than one base class.

Let's understand this through an example:

#include <iostream>  
using namespace std;  
class A  
{  
    public:  
    void display()  
    {  
        std::cout << ""Class A"" << std::endl;  
    }  
};  
class B  
{  
    public:  
    void display()  
    {  
        std::cout << ""Class B"" << std::endl;  
    }  
};  
class C : public A, public B  
{  
    void view()  
    {  
        display();  
    }  
};  
int main()  
{  
    C c;  
    c.display();  
    return 0;  
}  
Output:

error: reference to 'display' is ambiguous
        display();
The above issue can be resolved by using the class resolution operator with the function. In the above example, the derived class code can be rewritten as:
class C : public A, public B  
{  
    void view()  
    {  
        A :: display();         // Calling the display() function of class A.  
        B :: display();         // Calling the display() function of class B.  
  
    }  
};  
An ambiguity can also occur in single inheritance.

Consider the following situation:

class A  
{  
   public:  
void display()  
{  
   cout<<?Class A?;  
}   
} ;  
class B  
{   
  public:  
 void display()  
{  
 cout<<?Class B?;  
}  
} ;  
In the above case, the function of the derived class overrides the method of the base class. Therefore, call to the display() function will simply call the function defined in the derived class. If we want to invoke the base class function, we can use the class resolution operator.

int main()  
{  
    B b;  
   b.display();               // Calling the display() function of B class.  
   b.B :: display();       // Calling the display() function defined in B class.  
}   
C++ Hybrid Inheritance
Hybrid inheritance is a combination of more than one type of inheritance.

C++ Inheritance
Let's see a simple example:

#include <iostream>  
using namespace std;  
class A  
{  
    protected:  
    int a;  
    public:  
    void get_a()  
    {  
       std::cout << ""Enter the value of 'a' : "" << std::endl;  
       cin>>a;  
    }  
};  
  
class B : public A   
{  
    protected:  
    int b;  
    public:  
    void get_b()  
    {  
        std::cout << ""Enter the value of 'b' : "" << std::endl;  
       cin>>b;  
    }  
};  
class C   
{  
    protected:  
    int c;  
    public:  
    void get_c()  
    {  
        std::cout << ""Enter the value of c is : "" << std::endl;  
        cin>>c;  
    }  
};  
  
class D : public B, public C  
{  
    protected:  
    int d;  
    public:  
    void mul()  
    {  
         get_a();  
         get_b();  
         get_c();  
         std::cout << ""Multiplication of a,b,c is : "" <<a*b*c<< std::endl;  
    }  
};  
int main()  
{  
    D d;  
    d.mul();  
    return 0;  
}  
Output:

Enter the value of 'a' :
10              
Enter the value of 'b' :    
20      
Enter the value of c is :   
30  
Multiplication of a,b,c is : 6000
C++ Hierarchical Inheritance
Hierarchical inheritance is defined as the process of deriving more than one class from a base class.

C++ Inheritance
Syntax of Hierarchical inheritance:

class A  
{  
    // body of the class A.  
}    
class B : public A   
{  
    // body of class B.  
}  
class C : public A  
{  
    // body of class C.  
}   
class D : public A  
{  
    // body of class D.  
}   
Let's see a simple example:

#include <iostream>  
using namespace std;  
class Shape                 // Declaration of base class.  
{  
    public:  
    int a;  
    int b;  
    void get_data(int n,int m)  
    {  
        a= n;  
        b = m;  
    }  
};  
class Rectangle : public Shape  // inheriting Shape class  
{  
    public:  
    int rect_area()  
    {  
        int result = a*b;  
        return result;  
    }  
};  
class Triangle : public Shape    // inheriting Shape class  
{  
    public:  
    int triangle_area()  
    {  
        float result = 0.5*a*b;  
        return result;  
    }  
};  
int main()  
{  
    Rectangle r;  
    Triangle t;  
    int length,breadth,base,height;  
    std::cout << ""Enter the length and breadth of a rectangle: "" << std::endl;  
    cin>>length>>breadth;  
    r.get_data(length,breadth);  
    int m = r.rect_area();  
    std::cout << ""Area of the rectangle is : "" <<m<< std::endl;  
    std::cout << ""Enter the base and height of the triangle: "" << std::endl;  
    cin>>base>>height;  
    t.get_data(base,height);  
    float n = t.triangle_area();  
    std::cout <<""Area of the triangle is : ""  << n<<std::endl;  
    return 0;  
}",2020-10-11,2020-10-11
25,6,2020-10-11 11:42:19.825552+00:00,2020-10-11,0,0,Piet,c++,Soft skills,Bihar,Polymorphism in c++,"C++ Polymorphism
The term ""Polymorphism"" is the combination of ""poly"" + ""morphs"" which means many forms. It is a greek word. In object-oriented programming, we use 3 main concepts: inheritance, encapsulation, and polymorphism.

Real Life Example Of Polymorphism
Let's consider a real-life example of polymorphism. A lady behaves like a teacher in a classroom, mother or daughter in a home and customer in a market. Here, a single person is behaving differently according to the situations.

There are two types of polymorphism in C++:


C++
Compile time polymorphism: The overloaded functions are invoked by matching the type and number of arguments. This information is available at the compile time and, therefore, compiler selects the appropriate function at the compile time. It is achieved by function overloading and operator overloading which is also known as static binding or early binding. Now, let's consider the case where function name and prototype is same.
   class A                                  //  base class declaration.  
  {  
       int a;  
       public:  
       void display()  
       {   
             cout<< ""Class A "";  
        }  
  };  
class B : public A                       //  derived class declaration.  
{  
    int b;  
    public:  
   void display()  
  {  
        cout<<""Class B"";  
  }  
};  
In the above case, the prototype of display() function is the same in both the base and derived class. Therefore, the static binding cannot be applied. It would be great if the appropriate function is selected at the run time. This is known as run time polymorphism.

Run time polymorphism: Run time polymorphism is achieved when the object's method is invoked at the run time instead of compile time. It is achieved by method overriding which is also known as dynamic binding or late binding.
Differences b/w compile time and run time polymorphism.
Compile time polymorphism	Run time polymorphism
The function to be invoked is known at the compile time.	The function to be invoked is known at the run time.
It is also known as overloading, early binding and static binding.	It is also known as overriding, Dynamic binding and late binding.
Overloading is a compile time polymorphism where more than one method is having the same name but with the different number of parameters or the type of the parameters.	Overriding is a run time polymorphism where more than one method is having the same name, number of parameters and the type of the parameters.
It is achieved by function overloading and operator overloading.	It is achieved by virtual functions and pointers.
It provides fast execution as it is known at the compile time.	It provides slow execution as it is known at the run time.
It is less flexible as mainly all the things execute at the compile time.	It is more flexible as all the things execute at the run time.
C++ Runtime Polymorphism Example
Let's see a simple example of run time polymorphism in C++.

// an example without the virtual keyword.

#include <iostream>    
using namespace std;    
class Animal {    
    public:    
void eat(){      
cout<<""Eating..."";      
    }        
};     
class Dog: public Animal      
{      
 public:    
 void eat()      
    {           cout<<""Eating bread..."";      
    }      
};    
int main(void) {    
   Dog d = Dog();      
   d.eat();    
   return 0;    
}    
Output:

Eating bread...
C++ Run time Polymorphism Example: By using two derived class
Let's see another example of run time polymorphism in C++ where we are having two derived classes.

// an example with virtual keyword.

#include <iostream>    
using namespace std;    
class Shape {                                        //  base class  
    public:    
virtual void draw(){                             // virtual function  
cout<<""drawing...""<<endl;      
    }        
};     
class Rectangle: public Shape                  //  inheriting Shape class.  
{      
 public:    
 void draw()      
   {      
       cout<<""drawing rectangle...""<<endl;      
    }      
};    
class Circle: public Shape                        //  inheriting Shape class.  
  
{      
 public:    
 void draw()      
   {      
      cout<<""drawing circle...""<<endl;      
   }      
};    
int main(void) {    
    Shape *s;                               //  base class pointer.  
    Shape sh;                               // base class object.  
       Rectangle rec;    
        Circle cir;    
      s=&sh;    
     s->draw();     
        s=&rec;    
     s->draw();      
    s=?    
    s->draw();     
}    
Output:

drawing...
drawing rectangle...
drawing circle...
Runtime Polymorphism with Data Members
Runtime Polymorphism can be achieved by data members in C++. Let's see an example where we are accessing the field by reference variable which refers to the instance of derived class.

#include <iostream>    
using namespace std;    
class Animal {                                          //  base class declaration.  
    public:    
    string color = ""Black"";      
};     
class Dog: public Animal                       // inheriting Animal class.  
{      
 public:    
    string color = ""Grey"";      
};    
int main(void) {    
     Animal d= Dog();      
    cout<<d.color;     
}",2020-10-11,2020-10-11
24,6,2020-10-11 11:41:30.430820+00:00,2020-10-11,0,0,Piet,c++,Soft skills,Bihar,STL in c++,"COMPONENTS OF STL
CONTAINERS
Containers can be described as the objects that hold the data of the same type. Containers are used to implement different data structures for example arrays, list, trees, etc.

Following are the containers that give the details of all the containers as well as the header file and the type of iterator associated with them :

Container	Description	Header file	iterator
vector	vector is a class that creates a dynamic array allowing insertions and deletions at the back.	<vector>	Random access
list	list is the sequence containers that allow the insertions and deletions from anywhere.	<list>	Bidirectional
deque	deque is the double ended queue that allows the insertion and deletion from both the ends.	<deque>	Random access
set	set is an associate container for storing unique sets.	<set>	Bidirectional
multiset	Multiset is an associate container for storing non- unique sets.	<set>	Bidirectional
map	Map is an associate container for storing unique key-value pairs, i.e. each key is associated with only one value(one to one mapping).	<map>	Bidirectional
multimap	multimap is an associate container for storing key- value pair, and each key can be associated with more than one value.	<map>	Bidirectional
stack	It follows last in first out(LIFO).	<stack>	No iterator
queue	It follows first in first out(FIFO).	<queue>	No iterator
Priority-queue	First element out is always the highest priority element.	<queue>	No iterator
Classification of containers :


Sequence containers
Associative containers
Derived containers
STL COMPONENTS
Note : Each container class contains a set of functions that can be used to manipulate the contents.
ITERATOR
Iterators are pointer-like entities used to access the individual elements in a container.
Iterators are moved sequentially from one element to another element. This process is known as iterating through a container.
STL COMPONENTS
Iterator contains mainly two functions:
begin(): The member function begin() returns an iterator to the first element of the vector.

end(): The member function end() returns an iterator to the past-the-last element of a container.

STL COMPONENTS
Iterator Categories
Iterators are mainly divided into five categories:

STL COMPONENTS
Input iterator:
An Input iterator is an iterator that allows the program to read the values from the container.
Dereferencing the input iterator allows us to read a value from the container, but it does not alter the value.
An Input iterator is a one way iterator.
An Input iterator can be incremented, but it cannot be decremented.
Output iterator:
An output iterator is similar to the input iterator, except that it allows the program to modify a value of the container, but it does not allow to read it.
It is a one-way iterator.
It is a write only iterator.
Forward iterator:
Forward iterator uses the ++ operator to navigate through the container.
Forward iterator goes through each element of a container and one element at a time.
Bidirectional iterator:
A Bidirectional iterator is similar to the forward iterator, except that it also moves in the backward direction.
It is a two way iterator.
It can be incremented as well as decremented.
Random Access Iterator:
Random access iterator can be used to access the random element of a container.
Random access iterator has all the features of a bidirectional iterator, and it also has one more additional feature, i.e., pointer addition. By using the pointer addition operation, we can access the random element of a container.
Operations supported by iterators

iterator	Element access	Read	Write	Increment operation	Comparison
input	->	v = *p		++	==,!=
output			*p = v	++	
forward	->	v = *p	*p = v	++	==,!=
Bidirectional	->	v = *p	*p = v	++,--	==,!=
Random access	->,[ ]	v = *p	*p = v	++,--,+,-,+=,--=	==,!=,<,>,<=,>=
Algorithms
Algorithms are the functions used across a variety of containers for processing its contents.

Points to Remember:

Algorithms provide approx 60 algorithm functions to perform the complex operations.
Standard algorithms allow us to work with two different types of the container at the same time.
Algorithms are not the member functions of a container, but they are the standalone template functions.
Algorithms save a lot of time and effort.
If we want to access the STL algorithms, we must include the <algorithm> header file in our program.
STL algorithms can be categorized as:

STL COMPONENTS
Nonmutating algorithms: Nonmutating algorithms are the algorithms that do not alter any value of a container object nor do they change the order of the elements in which they appear. These algorithms can be used for all the container objects, and they make use of the forward iterators.
Mutating algorithms: Mutating algorithms are the algorithms that can be used to alter the value of a container. They can also be used to change the order of the elements in which they appear.
Sorting algorithms: Sorting algorithms are the modifying algorithms used to sort the elements in a container.
Set algorithms: Set algorithms are also known as sorted range algorithm. This algorithm is used to perform some function on a container that greatly improves the efficiency of a program.
Relational algorithms: Relational algorithms are the algorithms used to work on the numerical data. They are mainly designed to perform the mathematical operations to all the elements in a container.
FUNCTION OBJECTS
A Function object is a function wrapped in a class so that it looks like an object. A function object extends the characteristics of a regular function by using the feature of aN object oriented such as generic programming. Therefore, we can say that the function object is a smart pointer that has many advantages over the normal function.

Following are the advantages of function objects over a regular function:

Function objects can have member functions as well as member attributes.
Function objects can be initialized before their usage.
Regular functions can have different types only when the signature differs. Function objects can have different types even when the signature is the same.
Function objects are faster than the regular function.
A function object is also known as a 'functor'. A function object is an object that contains atleast one definition of operator() function. It means that if we declare the object 'd' of a class in which operator() function is defined, we can use the object 'd' as a regular function.

Suppose 'd' is an object of a class, operator() function can be called as:

d();  
  
which is same as:  
  
d.operator() ( );  
Let's see a simple example:

      #include <iostream>  
      using namespace std;  
     class function_object  
     {  
         public:  
        int operator()(int a, int b)              
       {  
           return a+b;  
       }  
    };  
  
     int main()  
    {  
       function_object f;                 
       int result = f(5,5);  
      cout<<""Addition of a and b is : ""<<result;  
  
    return 0;  
}  
Output:

Addition of a and b is : 10
In the above example, 'f' is an object of a function_object class which contains the definition of operator() function. Therefore, 'f' can be used as an ordinary function to call the operator() function.",2020-10-11,2020-10-11
23,6,2020-10-11 11:40:42.868518+00:00,2020-10-11,0,0,Piet,c++,Soft skills,Bihar,OOPs in c++,"C++ OOPs Concepts
The major purpose of C++ programming is to introduce the concept of object orientation to the C programming language.

Object Oriented Programming is a paradigm that provides many concepts such as inheritance, data binding, polymorphism etc.

The programming paradigm where everything is represented as an object is known as truly object-oriented programming language. Smalltalk is considered as the first truly object-oriented programming language.


OOPs (Object Oriented Programming System)
Object means a real word entity such as pen, chair, table etc. Object-Oriented Programming is a methodology or paradigm to design a program using classes and objects. It simplifies the software development and maintenance by providing some concepts:

Cpp Oops concept 1
Object
Class
Inheritance
Polymorphism
Abstraction
Encapsulation
Object
Any entity that has state and behavior is known as an object. For example: chair, pen, table, keyboard, bike etc. It can be physical and logical.

Class
Collection of objects is called class. It is a logical entity.

Inheritance
When one object acquires all the properties and behaviours of parent object i.e. known as inheritance. It provides code reusability. It is used to achieve runtime polymorphism.

Polymorphism
When one task is performed by different ways i.e. known as polymorphism. For example: to convince the customer differently, to draw something e.g. shape or rectangle etc.

In C++, we use Function overloading and Function overriding to achieve polymorphism.

Abstraction
Hiding internal details and showing functionality is known as abstraction. For example: phone call, we don't know the internal processing.

In C++, we use abstract class and interface to achieve abstraction.

Encapsulation
Binding (or wrapping) code and data together into a single unit is known as encapsulation. For example: capsule, it is wrapped with different medicines.

Advantage of OOPs over Procedure-oriented programming language
OOPs makes development and maintenance easier where as in Procedure-oriented programming language it is not easy to manage if code grows as project size grows.
OOPs provide data hiding whereas in Procedure-oriented programming language a global data can be accessed from anywhere.
OOPs provide ability to simulate real-world event much more effectively. We can provide the solution of real word problem if we are using the Object-Oriented Programming language.",2020-10-11,2020-10-11
22,6,2020-10-11 11:39:30.995796+00:00,2020-10-11,0,0,Piet,c++,Soft skills,Bihar,C++,"C++ Tutorial
C++ Programming
C++ tutorial provides basic and advanced concepts of C++. Our C++ tutorial is designed for beginners and professionals.

C++ is an object-oriented programming language. It is an extension to C programming.

Our C++ tutorial includes all topics of C++ such as first example, control statements, objects and classes, inheritance, constructor, destructor, this, static, polymorphism, abstraction, abstract class, interface, namespace, encapsulation, arrays, strings, exception handling, File IO, etc.


What is C++
C++ is a general purpose, case-sensitive, free-form programming language that supports object-oriented, procedural and generic programming.

C++ is a middle-level language, as it encapsulates both high and low level language features.

Object-Oriented Programming (OOPs)
C++ supports the object-oriented programming, the four major pillar of object-oriented programming (OOPs) used in C++ are:

Inheritance
Polymorphism
Encapsulation
Abstraction
C++ Standard Libraries
Standard C++ programming is divided into three important parts:

The core library includes the data types, variables and literals, etc.
The standard library includes the set of functions manipulating strings, files, etc.
The Standard Template Library (STL) includes the set of methods manipulating a data structure.

 
Usage of C++
By the help of C++ programming language, we can develop different types of secured and robust applications:

Window application
Client-Server application
Device drivers
Embedded firmware etc
C++ Program
In this tutorial, all C++ programs are given with C++ compiler so that you can easily change the C++ program code.

File: main.cpp

#include <iostream>  
using namespace std;  
int main() {  
   cout << ""Hello C++ Programming"";  
   return 0;  
}  
A detailed explanation of first C++ program is given in next chapters.",2020-10-11,2020-10-11
21,1,2020-10-11 11:35:37.654710+00:00,2020-10-11,0,0,PCE,Python,English communication,jaipur,List of all libraries in python,"Python Libraries – Python Standard Library & List of Important Libraries
1. Python Libraries
After Modules and Python Packages, we shift our discussion to Python Libraries. This Python Library Tutorial, we will discuss Python Standard library and different libraries offered by Python Programming Language: Matplotlib, scipy, numpy, etc.

So, let’s start the Python Libraries Tutorial.

Python Libraries
Python Libraries – Python Standard Library & List of Important Libraries

2. What is the Python Libraries?
We know that a module is a file with some Python code, and a package is a directory for sub packages and modules. But the line between a package and a Python library is quite blurred.

A Python library is a reusable chunk of code that you may want to include in your programs/ projects. Compared to languages like C++ or C, a Python libraries do not pertain to any specific context in Python. Here, a ‘library’ loosely describes a collection of core modules. Essentially, then, a library is a collection of modules. A package is a library that can be installed using a package manager like rubygems or npm.

Learn: A Comprehensive Guide on Python Packages

3. Python Standard Library
The Python Standard Library is a collection of exact syntax, token, and semantics of Python. It comes bundled with core Python distribution. We mentioned this when we began with an introduction.

It is written in C, and handles functionality like I/O and other core modules. All this functionality together makes Python the language it is. More than 200 core modules sit at the heart of the standard library. This library ships with Python. But in addition to this library, you can also access a growing collection of several thousand components from the Python Package Index (PyPI). We mentioned it in the previous blog.

Learn: Python Tuples vs Lists – Comparison between Lists and Tuples

4. Important Python Libraries
Next, we will see twenty Python libraries list that will take you places in your journey with Python. These are also the Python libraries for Data Science.

a. Matplotlib
Matplotlib helps with data analyzing, and is a numerical plotting library. We talked about it in Python for Data Science.


Python Libraries - Python matplotlib
Python Libraries Tutorial- matplotlib

b. Pandas
Like we’ve said before, Pandas is a must for data-science. It provides fast, expressive, and flexible data structures to easily (and intuitively) work with structured (tabular, multidimensional, potentially heterogeneous) and time-series data.

Python Pandas
Python Libraries Tutorial – Pandas

c. Requests
Requests is a Python Library that lets you send HTTP/1.1 requests, add headers, form data, multipart files, and parameters with simple Python dictionaries. It also lets you access the response data in the same way.

Python Requests Library
Python Libraries Tutorial- Requests

Learn: How to Install Python on Windows

d. NumPy
It has advanced math functions and a rudimentary scientific computing package.

Python NumPy
Python Libraries Tutorial – NumPy

e. SQLAlchemy
SQLAIchemy Overview
Python Libraries Tutorial – SQLAIchemy Overview

SQLAlchemy is a library with well-known enterprise-level patterns. It was designed for efficient and high-performing database-access.

f. BeautifulSoup
It may be a bit slow, BeautifulSoup has an excellent XML- and HTML- parsing library for beginners.

BeautifulSoup
Python Libraries Tutorial – BeautifulSoup

g. Pyglet
Pyglet is an excellent choice for an object-oriented programming interface in developing games. In fact, it also finds use in developing other visually-rich applications for Mac OS X, Windows, and Linux. In the 90s, when people were bored, they resorted to playing Minecraft on their computers. Pyglet is the engine behind Minecraft.


Python Pyglet
Python Libraries Tutorial – Pyglet

h. SciPy
Next up is SciPy, one of the libraries we have been talking so much about. It has a number of user-friendly and efficient numerical routines. These include routines for optimization and numerical integration.

Python SciPy
Python Libraries Tutorial- SciPy

Learn: 7 Reasons Why Should I Learn Python in 2018

i. Scrapy
If your motive is fast, high-level screen scraping and web crawling, go for Scrapy. You can use it for purposes from data mining to monitoring and automated testing.

Python Scrapy
Python Libraries Tutorial- Scrapy

j. PyGame
PyGame provides an extremely easy interface to the Simple Directmedia Library (SDL) platform-independent graphic, audio, and input libraries.

Python PyGame
Python Libraries Tutorial – PyGame

k. Python Twisted
An event-driven networking engine, Twisted is written in Python, and licensed under the open-source MIT license.

Python Library - Python Twisted
Python Libraries Tutorial – Twisted

l. Pillow
Pillow is a friendly fork of PIL (Python Imaging Library), but is more user-friendly. If you work with images, Pillow is your best friend.

Python Library - Python Pillow
Python Libraries Tutorial- Pillow

m. pywin32
This provides useful methods and class for interaction with Windows, as the name suggests.

Python Library - Python pywin32
Python pywin32 Library

n. wxPython
It is a wrapper around wxWidgets for Python.

Python Library - wxPython
Python wxPython Library

o. iPython
iPython Python Library has an architecture that facilitates parallel and distributed computing. With it, you can develop, execute, debug, and monitor parallel applications.

Python Library - iPython
Python Library – iPython

Learn: Python Regular Expressions

p. Nose
Nose delivers an alternate test discovery and running process for unittest. This intends to mimic py.test’s behavior as much as it can.

Python Library - Python Nose
Python Nose Library

q. Flask
A web framework, Flask is built with a small core and many extensions.

Python Library - Python Flask
Python Flask Library

r. SymPy
It is an open-source library for symbolic math. With very simple and comprehensible code that is easily extensible, SymPy is a full-fledged Computer Algebra System (CAS). It is written in Python, and hence does not need external libraries.

Python Library - Python SymPy
Python SymPy Library

s. Fabric
Along with being a library, Fabric is a command-line tool for streamlining the use of SSH for application deployment or systems administration tasks. With it, you can execute local or remote shell commands, upload/download files, and even prompt running user for input, or abort execution.

Python Library - Python Fabric
Python Fabric Library

t. PyGTK
PyGTK lets you easily create programs with a GUI (Graphical User Interface) with Python.

Python Library
Python PyGTK Library

Learn:The Tremendous Python Career Opportunities in 2018


So, this was all about Python Libraries Tutorial. Hope you like our explanation.",2020-10-10,2020-10-10
20,1,2020-10-11 11:35:01.435878+00:00,2020-10-11,0,0,PCE,Python,English communication,jaipur,Modules in Python,"A module allows you to logically organize your Python code. Grouping related code into a module makes the code easier to understand and use. A module is a Python object with arbitrarily named attributes that you can bind and reference.

Simply, a module is a file consisting of Python code. A module can define functions, classes and variables. A module can also include runnable code.

Example
The Python code for a module named aname normally resides in a file named aname.py. Here's an example of a simple module, support.py

def print_func( par ):
   print ""Hello : "", par
   return
The import Statement
You can use any Python source file as a module by executing an import statement in some other Python source file. The import has the following syntax −

import module1[, module2[,... moduleN]
When the interpreter encounters an import statement, it imports the module if the module is present in the search path. A search path is a list of directories that the interpreter searches before importing a module. For example, to import the module support.py, you need to put the following command at the top of the script −

#!/usr/bin/python

# Import module support
import support

# Now you can call defined function that module as follows
support.print_func(""Zara"")
When the above code is executed, it produces the following result −

Hello : Zara
A module is loaded only once, regardless of the number of times it is imported. This prevents the module execution from happening over and over again if multiple imports occur.

The from...import Statement
Python's from statement lets you import specific attributes from a module into the current namespace. The from...import has the following syntax −

from modname import name1[, name2[, ... nameN]]
For example, to import the function fibonacci from the module fib, use the following statement −

from fib import fibonacci
This statement does not import the entire module fib into the current namespace; it just introduces the item fibonacci from the module fib into the global symbol table of the importing module.

The from...import * Statement
It is also possible to import all names from a module into the current namespace by using the following import statement −

from modname import *
This provides an easy way to import all the items from a module into the current namespace; however, this statement should be used sparingly.

Locating Modules
When you import a module, the Python interpreter searches for the module in the following sequences −

The current directory.

If the module isn't found, Python then searches each directory in the shell variable PYTHONPATH.

If all else fails, Python checks the default path. On UNIX, this default path is normally /usr/local/lib/python/.

The module search path is stored in the system module sys as the sys.path variable. The sys.path variable contains the current directory, PYTHONPATH, and the installation-dependent default.

The PYTHONPATH Variable
The PYTHONPATH is an environment variable, consisting of a list of directories. The syntax of PYTHONPATH is the same as that of the shell variable PATH.

Here is a typical PYTHONPATH from a Windows system −

set PYTHONPATH = c:\python20\lib;
And here is a typical PYTHONPATH from a UNIX system −

set PYTHONPATH = /usr/local/lib/python
Namespaces and Scoping
Variables are names (identifiers) that map to objects. A namespace is a dictionary of variable names (keys) and their corresponding objects (values).

A Python statement can access variables in a local namespace and in the global namespace. If a local and a global variable have the same name, the local variable shadows the global variable.

Each function has its own local namespace. Class methods follow the same scoping rule as ordinary functions.

Python makes educated guesses on whether variables are local or global. It assumes that any variable assigned a value in a function is local.

Therefore, in order to assign a value to a global variable within a function, you must first use the global statement.

The statement global VarName tells Python that VarName is a global variable. Python stops searching the local namespace for the variable.

For example, we define a variable Money in the global namespace. Within the function Money, we assign Money a value, therefore Python assumes Money as a local variable. However, we accessed the value of the local variable Money before setting it, so an UnboundLocalError is the result. Uncommenting the global statement fixes the problem.

#!/usr/bin/python

Money = 2000
def AddMoney():
   # Uncomment the following line to fix the code:
   # global Money
   Money = Money + 1

print Money
AddMoney()
print Money
The dir( ) Function
The dir() built-in function returns a sorted list of strings containing the names defined by a module.

The list contains the names of all the modules, variables and functions that are defined in a module. Following is a simple example −

Live Demo
#!/usr/bin/python

# Import built-in module math
import math

content = dir(math)
print content
When the above code is executed, it produces the following result −

['__doc__', '__file__', '__name__', 'acos', 'asin', 'atan', 
'atan2', 'ceil', 'cos', 'cosh', 'degrees', 'e', 'exp', 
'fabs', 'floor', 'fmod', 'frexp', 'hypot', 'ldexp', 'log',
'log10', 'modf', 'pi', 'pow', 'radians', 'sin', 'sinh', 
'sqrt', 'tan', 'tanh']
Here, the special string variable __name__ is the module's name, and __file__ is the filename from which the module was loaded.

The globals() and locals() Functions
The globals() and locals() functions can be used to return the names in the global and local namespaces depending on the location from where they are called.

If locals() is called from within a function, it will return all the names that can be accessed locally from that function.

If globals() is called from within a function, it will return all the names that can be accessed globally from that function.

The return type of both these functions is dictionary. Therefore, names can be extracted using the keys() function.

The reload() Function
When the module is imported into a script, the code in the top-level portion of a module is executed only once.

Therefore, if you want to reexecute the top-level code in a module, you can use the reload() function. The reload() function imports a previously imported module again. The syntax of the reload() function is this −

reload(module_name)
Here, module_name is the name of the module you want to reload and not the string containing the module name. For example, to reload hello module, do the following −

reload(hello)
Packages in Python
A package is a hierarchical file directory structure that defines a single Python application environment that consists of modules and subpackages and sub-subpackages, and so on.

Consider a file Pots.py available in Phone directory. This file has following line of source code −

#!/usr/bin/python

def Pots():
   print ""I'm Pots Phone""
Similar way, we have another two files having different functions with the same name as above −

Phone/Isdn.py file having function Isdn()

Phone/G3.py file having function G3()

Now, create one more file __init__.py in Phone directory −

Phone/__init__.py
To make all of your functions available when you've imported Phone, you need to put explicit import statements in __init__.py as follows −

from Pots import Pots
from Isdn import Isdn
from G3 import G3
After you add these lines to __init__.py, you have all of these classes available when you import the Phone package.

#!/usr/bin/python

# Now import your Phone Package.
import Phone

Phone.Pots()
Phone.Isdn()
Phone.G3()
When the above code is executed, it produces the following result −

I'm Pots Phone
I'm 3G Phone
I'm ISDN Phone
In the above example, we have taken example of a single functions in each file, but you can keep multiple functions in your files. You can also define different Python classes in those files and then you can create your packages out of those classes.",2020-10-10,2020-10-10
19,3,2020-10-11 11:31:33.728715+00:00,2020-10-11,0,0,PCE,Python,None,bengal,Basic Syntax in python,"The Python language has many similarities to Perl, C, and Java. However, there are some definite differences between the languages.

First Python Program
Let us execute programs in different modes of programming.

Interactive Mode Programming
Invoking the interpreter without passing a script file as a parameter brings up the following prompt −

$ python
Python 2.4.3 (#1, Nov 11 2010, 13:34:43)
[GCC 4.1.2 20080704 (Red Hat 4.1.2-48)] on linux2
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>>
Type the following text at the Python prompt and press the Enter −

>>> print ""Hello, Python!""
If you are running new version of Python, then you would need to use print statement with parenthesis as in print (""Hello, Python!"");. However in Python version 2.4.3, this produces the following result −

Hello, Python!
Script Mode Programming
Invoking the interpreter with a script parameter begins execution of the script and continues until the script is finished. When the script is finished, the interpreter is no longer active.

Let us write a simple Python program in a script. Python files have extension .py. Type the following source code in a test.py file −

Live Demo
print ""Hello, Python!""
We assume that you have Python interpreter set in PATH variable. Now, try to run this program as follows −

$ python test.py
This produces the following result −

Hello, Python!
Let us try another way to execute a Python script. Here is the modified test.py file −

Live Demo
#!/usr/bin/python

print ""Hello, Python!""
We assume that you have Python interpreter available in /usr/bin directory. Now, try to run this program as follows −

$ chmod +x test.py     # This is to make file executable
$./test.py
This produces the following result −

Hello, Python!
Python Identifiers
A Python identifier is a name used to identify a variable, function, class, module or other object. An identifier starts with a letter A to Z or a to z or an underscore (_) followed by zero or more letters, underscores and digits (0 to 9).

Python does not allow punctuation characters such as @, $, and % within identifiers. Python is a case sensitive programming language. Thus, Manpower and manpower are two different identifiers in Python.

Here are naming conventions for Python identifiers −

Class names start with an uppercase letter. All other identifiers start with a lowercase letter.

Starting an identifier with a single leading underscore indicates that the identifier is private.

Starting an identifier with two leading underscores indicates a strongly private identifier.

If the identifier also ends with two trailing underscores, the identifier is a language-defined special name.

Reserved Words
The following list shows the Python keywords. These are reserved words and you cannot use them as constant or variable or any other identifier names. All the Python keywords contain lowercase letters only.

and	exec	not
assert	finally	or
break	for	pass
class	from	print
continue	global	raise
def	if	return
del	import	try
elif	in	while
else	is	with
except	lambda	yield
Lines and Indentation
Python provides no braces to indicate blocks of code for class and function definitions or flow control. Blocks of code are denoted by line indentation, which is rigidly enforced.

The number of spaces in the indentation is variable, but all statements within the block must be indented the same amount. For example −

if True:
   print ""True""
else:
   print ""False""
However, the following block generates an error −

if True:
print ""Answer""
print ""True""
else:
print ""Answer""
print ""False""
Thus, in Python all the continuous lines indented with same number of spaces would form a block. The following example has various statement blocks −

Note − Do not try to understand the logic at this point of time. Just make sure you understood various blocks even if they are without braces.

#!/usr/bin/python

import sys

try:
   # open file stream
   file = open(file_name, ""w"")
except IOError:
   print ""There was an error writing to"", file_name
   sys.exit()
print ""Enter '"", file_finish,
print ""' When finished""
while file_text != file_finish:
   file_text = raw_input(""Enter text: "")
   if file_text == file_finish:
      # close the file
      file.close
      break
   file.write(file_text)
   file.write(""\n"")
file.close()
file_name = raw_input(""Enter filename: "")
if len(file_name) == 0:
   print ""Next time please enter something""
   sys.exit()
try:
   file = open(file_name, ""r"")
except IOError:
   print ""There was an error reading file""
   sys.exit()
file_text = file.read()
file.close()
print file_text
Multi-Line Statements
Statements in Python typically end with a new line. Python does, however, allow the use of the line continuation character (\) to denote that the line should continue. For example −

total = item_one + \
        item_two + \
        item_three
Statements contained within the [], {}, or () brackets do not need to use the line continuation character. For example −

days = ['Monday', 'Tuesday', 'Wednesday',
        'Thursday', 'Friday']
Quotation in Python
Python accepts single ('), double ("") and triple (''' or """""") quotes to denote string literals, as long as the same type of quote starts and ends the string.

The triple quotes are used to span the string across multiple lines. For example, all the following are legal −

word = 'word'
sentence = ""This is a sentence.""
paragraph = """"""This is a paragraph. It is
made up of multiple lines and sentences.""""""
Comments in Python
A hash sign (#) that is not inside a string literal begins a comment. All characters after the # and up to the end of the physical line are part of the comment and the Python interpreter ignores them.

Live Demo
#!/usr/bin/python

# First comment
print ""Hello, Python!"" # second comment
This produces the following result −

Hello, Python!
You can type a comment on the same line after a statement or expression −

name = ""Madisetti"" # This is again comment
You can comment multiple lines as follows −

# This is a comment.
# This is a comment, too.
# This is a comment, too.
# I said that already.
Following triple-quoted string is also ignored by Python interpreter and can be used as a multiline comments:

'''
This is a multiline
comment.
'''
Using Blank Lines
A line containing only whitespace, possibly with a comment, is known as a blank line and Python totally ignores it.

In an interactive interpreter session, you must enter an empty physical line to terminate a multiline statement.

Waiting for the User
The following line of the program displays the prompt, the statement saying “Press the enter key to exit”, and waits for the user to take action −

#!/usr/bin/python

raw_input(""\n\nPress the enter key to exit."")
Here, ""\n\n"" is used to create two new lines before displaying the actual line. Once the user presses the key, the program ends. This is a nice trick to keep a console window open until the user is done with an application.

Multiple Statements on a Single Line
The semicolon ( ; ) allows multiple statements on the single line given that neither statement starts a new code block. Here is a sample snip using the semicolon −

import sys; x = 'foo'; sys.stdout.write(x + '\n')
Multiple Statement Groups as Suites
A group of individual statements, which make a single code block are called suites in Python. Compound or complex statements, such as if, while, def, and class require a header line and a suite.

Header lines begin the statement (with the keyword) and terminate with a colon ( : ) and are followed by one or more lines which make up the suite. For example −

if expression : 
   suite
elif expression : 
   suite 
else : 
   suite
Command Line Arguments
Many programs can be run to provide you with some basic information about how they should be run. Python enables you to do this with -h −

$ python -h
usage: python [option] ... [-c cmd | -m mod | file | -] [arg] ...
Options and arguments (and corresponding environment variables):
-c cmd : program passed in as string (terminates option list)
-d     : debug output from parser (also PYTHONDEBUG=x)
-E     : ignore environment variables (such as PYTHONPATH)
-h     : print this help message and exit

[ etc. ]
You can also program your script in such a way that it should accept various options. Command Line Arguments is an advanced topic and should be studied a bit later once you have gone through rest of the Python concepts.",2020-10-10,2020-10-10
18,4,2020-10-11 11:30:01.086549+00:00,2020-10-11,0,0,GIT,Java,None,bengal,RMI in java,"RMI (Remote Method Invocation)
Remote Method Invocation (RMI)
Understanding stub and skeleton
stub
skeleton
Requirements for the distributed applications
Steps to write the RMI program
RMI Example
The RMI (Remote Method Invocation) is an API that provides a mechanism to create distributed application in java. The RMI allows an object to invoke methods on an object running in another JVM.

The RMI provides remote communication between the applications using two objects stub and skeleton.

Understanding stub and skeleton
RMI uses stub and skeleton object for communication with the remote object.


A remote object is an object whose method can be invoked from another JVM. Let's understand the stub and skeleton objects:

stub
The stub is an object, acts as a gateway for the client side. All the outgoing requests are routed through it. It resides at the client side and represents the remote object. When the caller invokes method on the stub object, it does the following tasks:

It initiates a connection with remote Virtual Machine (JVM),
It writes and transmits (marshals) the parameters to the remote Virtual Machine (JVM),
It waits for the result
It reads (unmarshals) the return value or exception, and
It finally, returns the value to the caller.
skeleton
The skeleton is an object, acts as a gateway for the server side object. All the incoming requests are routed through it. When the skeleton receives the incoming request, it does the following tasks:

It reads the parameter for the remote method
It invokes the method on the actual remote object, and
It writes and transmits (marshals) the result to the caller.
In the Java 2 SDK, an stub protocol was introduced that eliminates the need for skeletons. stub and skeleton in RMI

 
Understanding requirements for the distributed applications
If any application performs these tasks, it can be distributed application.

.
The application need to locate the remote method
It need to provide the communication with the remote objects, and
The application need to load the class definitions for the objects.
The RMI application have all these features, so it is called the distributed application.

Java RMI Example
The is given the 6 steps to write the RMI program.

Create the remote interface
Provide the implementation of the remote interface
Compile the implementation class and create the stub and skeleton objects using the rmic tool
Start the registry service by rmiregistry tool
Create and start the remote application
Create and start the client application
RMI Example
In this example, we have followed all the 6 steps to create and run the rmi application. The client application need only two files, remote interface and client application. In the rmi application, both client and server interacts with the remote interface. The client application invokes methods on the proxy object, RMI sends the request to the remote JVM. The return value is sent back to the proxy object and then to the client application.

RMI example
1) create the remote interface
For creating the remote interface, extend the Remote interface and declare the RemoteException with all the methods of the remote interface. Here, we are creating a remote interface that extends the Remote interface. There is only one method named add() and it declares RemoteException.

import java.rmi.*;  
public interface Adder extends Remote{  
public int add(int x,int y)throws RemoteException;  
}  
2) Provide the implementation of the remote interface
Now provide the implementation of the remote interface. For providing the implementation of the Remote interface, we need to

Either extend the UnicastRemoteObject class,
or use the exportObject() method of the UnicastRemoteObject class
In case, you extend the UnicastRemoteObject class, you must define a constructor that declares RemoteException.
import java.rmi.*;  
import java.rmi.server.*;  
public class AdderRemote extends UnicastRemoteObject implements Adder{  
AdderRemote()throws RemoteException{  
super();  
}  
public int add(int x,int y){return x+y;}  
}  
3) create the stub and skeleton objects using the rmic tool.
Next step is to create stub and skeleton objects using the rmi compiler. The rmic tool invokes the RMI compiler and creates stub and skeleton objects.

rmic AdderRemote  
4) Start the registry service by the rmiregistry tool
Now start the registry service by using the rmiregistry tool. If you don't specify the port number, it uses a default port number. In this example, we are using the port number 5000.

rmiregistry 5000  
5) Create and run the server application
Now rmi services need to be hosted in a server process. The Naming class provides methods to get and store the remote object. The Naming class provides 5 methods.

public static java.rmi.Remote lookup(java.lang.String) throws java.rmi.NotBoundException, java.net.MalformedURLException, java.rmi.RemoteException;	It returns the reference of the remote object.
public static void bind(java.lang.String, java.rmi.Remote) throws java.rmi.AlreadyBoundException, java.net.MalformedURLException, java.rmi.RemoteException;	It binds the remote object with the given name.
public static void unbind(java.lang.String) throws java.rmi.RemoteException, java.rmi.NotBoundException, java.net.MalformedURLException;	It destroys the remote object which is bound with the given name.
public static void rebind(java.lang.String, java.rmi.Remote) throws java.rmi.RemoteException, java.net.MalformedURLException;	It binds the remote object to the new name.
public static java.lang.String[] list(java.lang.String) throws java.rmi.RemoteException, java.net.MalformedURLException;	It returns an array of the names of the remote objects bound in the registry.
In this example, we are binding the remote object by the name sonoo.

import java.rmi.*;  
import java.rmi.registry.*;  
public class MyServer{  
public static void main(String args[]){  
try{  
Adder stub=new AdderRemote();  
Naming.rebind(""rmi://localhost:5000/sonoo"",stub);  
}catch(Exception e){System.out.println(e);}  
}  
}  
6) Create and run the client application
At the client we are getting the stub object by the lookup() method of the Naming class and invoking the method on this object. In this example, we are running the server and client applications, in the same machine so we are using localhost. If you want to access the remote object from another machine, change the localhost to the host name (or IP address) where the remote object is located.

import java.rmi.*;  
public class MyClient{  
public static void main(String args[]){  
try{  
Adder stub=(Adder)Naming.lookup(""rmi://localhost:5000/sonoo"");  
System.out.println(stub.add(34,4));  
}catch(Exception e){}  
}  
}  
download this example of rmi
For running this rmi example,  
  
1) compile all the java files  
  
javac *.java  
  
2)create stub and skeleton object by rmic tool  
  
rmic AdderRemote  
  
3)start rmi registry in one command prompt  
  
rmiregistry 5000  
  
4)start the server in another command prompt  
  
java MyServer  
  
5)start the client application in another command prompt  
  
java MyClient  
Output of this RMI example
RMI RMI
Meaningful example of RMI application with database
Consider a scenario, there are two applications running in different machines. Let's say MachineA and MachineB, machineA is located in United States and MachineB in India. MachineB want to get list of all the customers of MachineA application.

Let's develop the RMI application by following the steps.

1) Create the table
First of all, we need to create the table in the database. Here, we are using Oracle10 database.

RMI application with database
2) Create Customer class and Remote interface
File: Customer.java
package com.javatpoint;  
public class Customer implements java.io.Serializable{  
    private int acc_no;  
    private String firstname,lastname,email;  
    private float amount;  
//getters and setters  
}  
Note: Customer class must be Serializable.
File: Bank.java
package com.javatpoint;  
import java.rmi.*;  
import java.util.*;  
interface Bank extends Remote{  
public List<Customer> getCustomers()throws RemoteException;  
}  
3) Create the class that provides the implementation of Remote interface
File: BankImpl.java
package com.javatpoint;  
import java.rmi.*;  
import java.rmi.server.*;  
import java.sql.*;  
import java.util.*;  
class BankImpl extends UnicastRemoteObject implements Bank{  
BankImpl()throws RemoteException{}  
  
public List<Customer> getCustomers(){  
List<Customer> list=new ArrayList<Customer>();  
try{  
Class.forName(""oracle.jdbc.driver.OracleDriver"");  
Connection con=DriverManager.getConnection(""jdbc:oracle:thin:@localhost:1521:xe"",""system"",""oracle"");  
PreparedStatement ps=con.prepareStatement(""select * from customer400"");  
ResultSet rs=ps.executeQuery();  
  
while(rs.next()){  
Customer c=new Customer();  
c.setAcc_no(rs.getInt(1));  
c.setFirstname(rs.getString(2));  
c.setLastname(rs.getString(3));  
c.setEmail(rs.getString(4));  
c.setAmount(rs.getFloat(5));  
list.add(c);  
}  
  
con.close();  
}catch(Exception e){System.out.println(e);}  
return list;  
}//end of getCustomers()  
}",2020-10-10,2020-10-10
17,5,2020-10-11 11:28:32.365387+00:00,2020-10-11,0,0,Piet,Java,Soft skills,Bihar,Jdbc in Java,"Java JDBC Tutorial
JDBC stands for Java Database Connectivity. JDBC is a Java API to connect and execute the query with the database. It is a part of JavaSE (Java Standard Edition). JDBC API uses JDBC drivers to connect with the database. There are four types of JDBC drivers:

JDBC-ODBC Bridge Driver,
Native Driver,
Network Protocol Driver, and
Thin Driver
We have discussed the above four drivers in the next chapter.

We can use JDBC API to access tabular data stored in any relational database. By the help of JDBC API, we can save, update, delete and fetch data from the database. It is like Open Database Connectivity (ODBC) provided by Microsoft.


JDBC (Java Database Connectivity) 
The current version of JDBC is 4.3. It is the stable release since 21st September, 2017. It is based on the X/Open SQL Call Level Interface. The java.sql package contains classes and interfaces for JDBC API. A list of popular interfaces of JDBC API are given below:

Driver interface
Connection interface
Statement interface
PreparedStatement interface
CallableStatement interface
ResultSet interface
ResultSetMetaData interface
DatabaseMetaData interface
RowSet interface
A list of popular classes of JDBC API are given below:

DriverManager class
Blob class
Clob class
Types class
Why Should We Use JDBC
Before JDBC, ODBC API was the database API to connect and execute the query with the database. But, ODBC API uses ODBC driver which is written in C language (i.e. platform dependent and unsecured). That is why Java has defined its own API (JDBC API) that uses JDBC drivers (written in Java language).

We can use JDBC API to handle database using Java program and can perform the following activities:

Connect to the database
Execute queries and update statements to the database
Retrieve the result received from the database.
Do You Know
How to connect Java application with Oracle and Mysql database using JDBC?
What is the difference between Statement and PreparedStatement interface?
How to print total numbers of tables and views of a database using JDBC?
How to store and retrieve images from Oracle database using JDBC?
How to store and retrieve files from Oracle database using JDBC?

 
What is API
API (Application programming interface) is a document that contains a description of all the features of a product or software. It represents classes and interfaces that software programs can follow to communicate with each other. An API can be created for applications, libraries, operating systems, etc.

Topics in Java JDBC Tutorial
2) JDBC Drivers
In this JDBC tutorial, we will learn four types of JDBC drivers, their advantages and disadvantages.

3) 5 Steps to connect to the Database
In this JDBC tutorial, we will see the five steps to connect to the database in Java using JDBC.

4) Connectivity with Oracle using JDBC
In this JDBC tutorial, we will connect a simple Java program with the Oracle database.

5) Connectivity with MySQL using JDBC
In this JDBC tutorial, we will connect a simple Java program with the MySQL database.

6) Connectivity with Access without DSN
Let's connect java application with access database with and without DSN.

7) DriverManager class
In this JDBC tutorial, we will learn what does the DriverManager class and what are its methods.

8) Connection interface
In this JDBC tutorial, we will learn what is Connection interface and what are its methods.

9) Statement interface
In this JDBC tutorial, we will learn what is Statement interface and what are its methods.

10) ResultSet interface
In this JDBC tutorial, we will learn what is ResultSet interface and what are its methods. Moreover, we will learn how we can make the ResultSet scrollable.

11) PreparedStatement Interface
In this JDBC tutorial, we will learn what is benefit of PreparedStatement over Statement interface. We will see examples to insert, update or delete records using the PreparedStatement interface.

12) ResultSetMetaData interface
In this JDBC tutorial, we will learn how we can get the metadata of a table.

13) DatabaseMetaData interface
In this JDBC tutorial, we will learn how we can get the metadata of a database.

14) Storing image in Oracle
Let's learn how to store image in the Oracle database using JDBC.

15) Retrieving image from Oracle
Let's see the simple example to retrieve image from the Oracle database using JDBC.

16) Storing file in Oracle
Let's see the simple example to store file in the Oracle database using JDBC.

17) Retrieving file from Oracle
Let's see the simple example to retrieve file from the Oracle database using JDBC.

18) CallableStatement
Let's see the code to call stored procedures and functions using CallableStatement.

19) Transaction Management using JDBC
Let's see the simple example to use transaction management using JDBC.

20) Batch Statement using JDBC
Let's see the code to execute batch of queries.

21) JDBC RowSet",2020-10-11,2020-10-11
16,5,2020-10-11 11:26:58.714355+00:00,2020-10-11,0,0,Piet,Java,Soft skills,Bihar,Explanation of Multithreading in java.,"Multithreading in Java
Multithreading
Multitasking
Process-based multitasking
Thread-based multitasking
What is Thread
Multithreading in Java is a process of executing multiple threads simultaneously.

A thread is a lightweight sub-process, the smallest unit of processing. Multiprocessing and multithreading, both are used to achieve multitasking.

However, we use multithreading than multiprocessing because threads use a shared memory area. They don't allocate separate memory area so saves memory, and context-switching between the threads takes less time than process.


Java Multithreading is mostly used in games, animation, etc.

Advantages of Java Multithreading
1) It doesn't block the user because threads are independent and you can perform multiple operations at the same time.

2) You can perform many operations together, so it saves time.

3) Threads are independent, so it doesn't affect other threads if an exception occurs in a single thread.


 
Multitasking
Multitasking is a process of executing multiple tasks simultaneously. We use multitasking to utilize the CPU. Multitasking can be achieved in two ways:

Process-based Multitasking (Multiprocessing)
Thread-based Multitasking (Multithreading)
1) Process-based Multitasking (Multiprocessing)
Each process has an address in memory. In other words, each process allocates a separate memory area.
A process is heavyweight.
Cost of communication between the process is high.
Switching from one process to another requires some time for saving and loading registers, memory maps, updating lists, etc.
2) Thread-based Multitasking (Multithreading)
Threads share the same address space.
A thread is lightweight.
Cost of communication between the thread is low.
Note: At least one process is required for each thread.
What is Thread in java
A thread is a lightweight subprocess, the smallest unit of processing. It is a separate path of execution.

Threads are independent. If there occurs exception in one thread, it doesn't affect other threads. It uses a shared memory area.

Java Multithreading
As shown in the above figure, a thread is executed inside the process. There is context-switching between the threads. There can be multiple processes inside the OS, and one process can have multiple threads.

Note: At a time one thread is executed only.
Java Thread class
Java provides Thread class to achieve thread programming. Thread class provides constructors and methods to create and perform operations on a thread. Thread class extends Object class and implements Runnable interface.",2020-10-11,2020-10-11
15,5,2020-10-11 11:24:39.990224+00:00,2020-10-11,0,0,Piet,Java,Soft skills,Bihar,Java encapsulation,"next →← prev
Encapsulation in Java
Encapsulation in Java is a process of wrapping code and data together into a single unit, for example, a capsule which is mixed of several medicines.

encapsulation in java
We can create a fully encapsulated class in Java by making all the data members of the class private. Now we can use setter and getter methods to set and get the data in it.

The Java Bean class is the example of a fully encapsulated class.


Advantage of Encapsulation in Java
By providing only a setter or getter method, you can make the class read-only or write-only. In other words, you can skip the getter or setter methods.

It provides you the control over the data. Suppose you want to set the value of id which should be greater than 100 only, you can write the logic inside the setter method. You can write the logic not to store the negative numbers in the setter methods.

It is a way to achieve data hiding in Java because other class will not be able to access the data through the private data members.

The encapsulate class is easy to test. So, it is better for unit testing.

The standard IDE's are providing the facility to generate the getters and setters. So, it is easy and fast to create an encapsulated class in Java.


 
Simple Example of Encapsulation in Java
Let's see the simple example of encapsulation that has only one field with its setter and getter methods.

File: Student.java

//A Java class which is a fully encapsulated class.  
//It has a private data member and getter and setter methods.  
package com.javatpoint;  
public class Student{  
//private data member  
private String name;  
//getter method for name  
public String getName(){  
return name;  
}  
//setter method for name  
public void setName(String name){  
this.name=name  
}  
}  
File: Test.java

//A Java class to test the encapsulated class.  
package com.javatpoint;  
class Test{  
public static void main(String[] args){  
//creating instance of the encapsulated class  
Student s=new Student();  
//setting value in the name member  
s.setName(""vijay"");  
//getting value of the name member  
System.out.println(s.getName());  
}  
}",2020-10-11,2020-10-11
14,5,2020-10-11 11:18:38.397983+00:00,2020-10-11,0,0,Piet,Java,Soft skills,Bihar,Java object,"Java objects’ state and behavior

public class Person {
  // state of an object
  int age;
  String name;
  
  // behavior of an object
  public void set_value() {
    age = 20;
    name = ""Robin"";
  }
  public void get_value() {
    System.out.println(""Age is "" + age);
    System.out.println(""Name is "" + name);
  }
  
  // main method
  public static void main(String [] args) {
    // creates a new Person object
    Person p = new Person(); 
    
    // changes state through behavior
    p.set_value();
  }
}",2020-10-11,2020-10-11
13,5,2020-10-11 11:17:56.365225+00:00,2020-10-11,0,0,Piet,Java,Soft skills,Bihar,Explain Java abstract class ?,"Abstract class in Java
A class which is declared with the abstract keyword is known as an abstract class in Java. It can have abstract and non-abstract methods (method with the body).

Before learning the Java abstract class, let's understand the abstraction in Java first.

Abstraction in Java
Abstraction is a process of hiding the implementation details and showing only functionality to the user.


Another way, it shows only essential things to the user and hides the internal details, for example, sending SMS where you type the text and send the message. You don't know the internal processing about the message delivery.

Abstraction lets you focus on what the object does instead of how it does it.

Ways to achieve Abstraction
There are two ways to achieve abstraction in java

Abstract class (0 to 100%)
Interface (100%)

 
Abstract class in Java
A class which is declared as abstract is known as an abstract class. It can have abstract and non-abstract methods. It needs to be extended and its method implemented. It cannot be instantiated.

Points to Remember
An abstract class must be declared with an abstract keyword.
It can have abstract and non-abstract methods.
It cannot be instantiated.
It can have constructors and static methods also.
It can have final methods which will force the subclass not to change the body of the method.
Rules for Java Abstract class
Example of abstract class

abstract class A{}  
Abstract Method in Java
A method which is declared as abstract and does not have implementation is known as an abstract method.

Example of abstract method

abstract void printStatus();//no method body and abstract  
Example of Abstract class that has an abstract method
In this example, Bike is an abstract class that contains only one abstract method run. Its implementation is provided by the Honda class.

abstract class Bike{  
  abstract void run();  
}  
class Honda4 extends Bike{  
void run(){System.out.println(""running safely"");}  
public static void main(String args[]){  
 Bike obj = new Honda4();  
 obj.run();  
}  
}",2020-10-11,2020-10-11
12,5,2020-10-11 11:16:25.794664+00:00,2020-10-11,0,0,Piet,Java,Soft skills,Bihar,Java Oop,"Method Overloading in Java
Different ways to overload the method
By changing the no. of arguments
By changing the datatype
Why method overloading is not possible by changing the return type
Can we overload the main method
method overloading with Type Promotion
If a class has multiple methods having same name but different in parameters, it is known as Method Overloading.

If we have to perform only one operation, having same name of the methods increases the readability of the program.

Suppose you have to perform addition of the given numbers but there can be any number of arguments, if you write the method such as a(int,int) for two parameters, and b(int,int,int) for three parameters then it may be difficult for you as well as other programmers to understand the behavior of the method because its name differs.


So, we perform method overloading to figure out the program quickly.

java method overloading
Advantage of method overloading
Method overloading increases the readability of the program.

Different ways to overload the method
There are two ways to overload the method in java

By changing number of arguments
By changing the data type
In Java, Method Overloading is not possible by changing the return type of the method only.

 
1) Method Overloading: changing no. of arguments
In this example, we have created two methods, first add() method performs addition of two numbers and second add method performs addition of three numbers.

In this example, we are creating static methods so that we don't need to create instance for calling methods.

class Adder{  
static int add(int a,int b){return a+b;}  
static int add(int a,int b,int c){return a+b+c;}  
}  
class TestOverloading1{  
public static void main(String[] args){  
System.out.println(Adder.add(11,11));  
System.out.println(Adder.add(11,11,11));  
}}",2020-10-11,2020-10-11
11,4,2020-10-10 11:24:04.366062+00:00,2020-10-10,0,0,GIT,Java,None,bengal,Java,"Java - What is OOP?
OOP stands for Object-Oriented Programming.

Procedural programming is about writing procedures or methods that perform operations on the data, while object-oriented programming is about creating objects that contain both data and methods.

Object-oriented programming has several advantages over procedural programming:

OOP is faster and easier to execute
OOP provides a clear structure for the programs
OOP helps to keep the Java code DRY ""Don't Repeat Yourself"", and makes the code easier to maintain, modify and debug
OOP makes it possible to create full reusable applications with less code and shorter development time
Tip: The ""Don't Repeat Yourself"" (DRY) principle is about reducing the repetition of code. You should extract out the codes that are common for the application, and place them at a single place and reuse them instead of repeating it",2020-10-10,2020-10-10
10,4,2020-10-10 11:23:19.197119+00:00,2020-10-10,0,0,GIT,Java,None,bengal,Java Loop,"Java For Loop
When you know exactly how many times you want to loop through a block of code, use the for loop instead of a while loop:

Syntax
for (statement 1; statement 2; statement 3) {
  // code block to be executed
 }
Statement 1 is executed (one time) before the execution of the code block.

Statement 2 defines the condition for executing the code block.

Statement 3 is executed (every time) after the code block has been executed.

The example below will print the numbers 0 to 4:

Example
for (int i = 0; i < 5; i++) {
  System.out.println(i);
}",2020-10-10,2020-10-10
9,4,2020-10-10 11:22:14.225144+00:00,2020-10-10,0,0,GIT,Java,None,bengal,Java Strings,"More String Methods
There are many string methods available, for example toUpperCase() and toLowerCase():

Example
String txt = ""Hello World"";
System.out.println(txt.toUpperCase());   // Outputs ""HELLO WORLD""
System.out.println(txt.toLowerCase());   // Outputs ""hello world""",2020-10-10,2020-10-10
8,4,2020-10-10 11:21:41.028963+00:00,2020-10-10,0,0,GIT,Java,None,bengal,Java Operators,"Java divides the operators into the following groups:

Arithmetic operators
Assignment operators
Comparison operators
Logical operators
Bitwise operators",2020-10-10,2020-10-10
7,1,2020-10-10 11:19:18.409361+00:00,2020-10-10,0,0,PCE,Python,English communication,jaipur,java datatypes,"Java Data Types
As explained in the previous chapter, a variable in Java must be a specified data type:

Example
int myNum = 5;               // Integer (whole number)
float myFloatNum = 5.99f;    // Floating point number
char myLetter = 'D';         // Character
boolean myBool = true;       // Boolean
String myText = ""Hello"";     // String",2020-10-10,2020-10-10
6,3,2020-10-10 11:18:08.617425+00:00,2020-10-10,0,0,PCE,Python,None,bengal,What is Java ? Why Java ?,"What is Java?
Java is a popular programming language, created in 1995.

It is owned by Oracle, and more than 3 billion devices run Java.

It is used for:

Mobile applications (specially Android apps)
Desktop applications
Web applications
Web servers and application servers
Games
Database connection
And much, much more!
Why Use Java?
Java works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc.)
It is one of the most popular programming language in the world
It is easy to learn and simple to use
It is open-source and free
It is secure, fast and powerful
It has a huge community support (tens of millions of developers)
Java is an object oriented language which gives a clear structure to programs and allows code to be reused, lowering development costs
As Java is close to C++ and C#, it makes it easy for programmers to switch to Java or vice versa",2020-10-10,2020-10-10
5,3,2020-10-10 11:16:36.344969+00:00,2020-10-10,0,0,PCE,Python,None,bengal,Python,"What is Python?
Python is a popular programming language. It was created by Guido van Rossum, and released in 1991.

It is used for:

web development (server-side),
software development,
mathematics,
system scripting.
What can Python do?
Python can be used on a server to create web applications.
Python can be used alongside software to create workflows.
Python can connect to database systems. It can also read and modify files.
Python can be used to handle big data and perform complex mathematics.
Python can be used for rapid prototyping, or for production-ready software development.
Why Python?
Python works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).
Python has a simple syntax similar to the English language.
Python has syntax that allows developers to write programs with fewer lines than some other programming languages.
Python runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.
Python can be treated in a procedural way, an object-oriented way or a functional way.",2020-10-10,2020-10-10
4,2,2020-10-10 10:00:42.849787+00:00,2020-10-10,0,0,PCE,Python,None,jaipur,Python,"Python For Loops
A for loop is used for iterating over a sequence (that is either a list, a tuple, a dictionary, a set, or a string).

This is less like the for keyword in other programming languages, and works more like an iterator method as found in other object-orientated programming languages.

With the for loop we can execute a set of statements, once for each item in a list, tuple, set etc.

Example
Print each fruit in a fruit list:

fruits = [""apple"", ""banana"", ""cherry""]
for x in fruits:
  print(x)",2020-10-10,2020-10-10
3,3,2020-10-10 09:59:57.159862+00:00,2020-10-10,0,0,PCE,Python,None,bengal,Python,"Python Collections (Arrays)
There are four collection data types in the Python programming language:

List is a collection which is ordered and changeable. Allows duplicate members.
Tuple is a collection which is ordered and unchangeable. Allows duplicate members.
Set is a collection which is unordered and unindexed. No duplicate members.
Dictionary is a collection which is unordered, changeable and indexed. No duplicate members.
When choosing a collection type, it is useful to understand the properties of that type. Choosing the right type for a particular data set could mean retention of meaning, and, it could mean an increase in efficiency or security.

List
A list is a collection which is ordered and changeable. In Python lists are written with square brackets.",2020-10-10,2020-10-10
2,2,2020-10-10 09:30:20.877420+00:00,2020-10-10,0,0,PCE,Python,None,jaipur,Python,"Python Dictionary
child1 = {
  ""name"" : ""Emil"",
  ""year"" : 2004
}
child2 = {
  ""name"" : ""Tobias"",
  ""year"" : 2007
}
child3 = {
  ""name"" : ""Linus"",
  ""year"" : 2011
}

myfamily = {
  ""child1"" : child1,
  ""child2"" : child2,
  ""child3"" : child3
}",2020-10-10,2020-10-10
1,1,2020-10-10 08:37:53.973458+00:00,2020-10-10,0,0,PCE,Python,English communication,jaipur,Python Hello world,"print(""Hello World"")",2020-10-10,2020-10-10
